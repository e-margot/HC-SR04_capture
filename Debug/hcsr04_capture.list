
hcsr04_capture.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dfc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002ebc  08002ebc  00012ebc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f2c  08002f2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f2c  08002f2c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f2c  08002f2c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f30  08002f30  00012f30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000000c  08002f40  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  08002f40  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008801  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001519  00000000  00000000  00028835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  00029d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000820  00000000  00000000  0002a618  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001805f  00000000  00000000  0002ae38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009bae  00000000  00000000  00042e97  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c72c  00000000  00000000  0004ca45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d9171  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001fe4  00000000  00000000  000d91c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002ea4 	.word	0x08002ea4

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002ea4 	.word	0x08002ea4

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_fadd>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	46d6      	mov	lr, sl
 8000226:	464f      	mov	r7, r9
 8000228:	024d      	lsls	r5, r1, #9
 800022a:	0242      	lsls	r2, r0, #9
 800022c:	b5c0      	push	{r6, r7, lr}
 800022e:	0a52      	lsrs	r2, r2, #9
 8000230:	0a6e      	lsrs	r6, r5, #9
 8000232:	0047      	lsls	r7, r0, #1
 8000234:	46b0      	mov	r8, r6
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	004e      	lsls	r6, r1, #1
 800023a:	0fc4      	lsrs	r4, r0, #31
 800023c:	00d0      	lsls	r0, r2, #3
 800023e:	4694      	mov	ip, r2
 8000240:	003b      	movs	r3, r7
 8000242:	4682      	mov	sl, r0
 8000244:	0e36      	lsrs	r6, r6, #24
 8000246:	0fc9      	lsrs	r1, r1, #31
 8000248:	09ad      	lsrs	r5, r5, #6
 800024a:	428c      	cmp	r4, r1
 800024c:	d06d      	beq.n	800032a <__aeabi_fadd+0x10a>
 800024e:	1bb8      	subs	r0, r7, r6
 8000250:	4681      	mov	r9, r0
 8000252:	2800      	cmp	r0, #0
 8000254:	dd4d      	ble.n	80002f2 <__aeabi_fadd+0xd2>
 8000256:	2e00      	cmp	r6, #0
 8000258:	d100      	bne.n	800025c <__aeabi_fadd+0x3c>
 800025a:	e088      	b.n	800036e <__aeabi_fadd+0x14e>
 800025c:	2fff      	cmp	r7, #255	; 0xff
 800025e:	d05a      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000260:	2380      	movs	r3, #128	; 0x80
 8000262:	04db      	lsls	r3, r3, #19
 8000264:	431d      	orrs	r5, r3
 8000266:	464b      	mov	r3, r9
 8000268:	2201      	movs	r2, #1
 800026a:	2b1b      	cmp	r3, #27
 800026c:	dc0a      	bgt.n	8000284 <__aeabi_fadd+0x64>
 800026e:	002b      	movs	r3, r5
 8000270:	464a      	mov	r2, r9
 8000272:	4649      	mov	r1, r9
 8000274:	40d3      	lsrs	r3, r2
 8000276:	2220      	movs	r2, #32
 8000278:	1a52      	subs	r2, r2, r1
 800027a:	4095      	lsls	r5, r2
 800027c:	002a      	movs	r2, r5
 800027e:	1e55      	subs	r5, r2, #1
 8000280:	41aa      	sbcs	r2, r5
 8000282:	431a      	orrs	r2, r3
 8000284:	4653      	mov	r3, sl
 8000286:	1a9a      	subs	r2, r3, r2
 8000288:	0153      	lsls	r3, r2, #5
 800028a:	d400      	bmi.n	800028e <__aeabi_fadd+0x6e>
 800028c:	e0b9      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800028e:	0192      	lsls	r2, r2, #6
 8000290:	0996      	lsrs	r6, r2, #6
 8000292:	0030      	movs	r0, r6
 8000294:	f000 fab6 	bl	8000804 <__clzsi2>
 8000298:	3805      	subs	r0, #5
 800029a:	4086      	lsls	r6, r0
 800029c:	4287      	cmp	r7, r0
 800029e:	dd00      	ble.n	80002a2 <__aeabi_fadd+0x82>
 80002a0:	e0d4      	b.n	800044c <__aeabi_fadd+0x22c>
 80002a2:	0033      	movs	r3, r6
 80002a4:	1bc7      	subs	r7, r0, r7
 80002a6:	2020      	movs	r0, #32
 80002a8:	3701      	adds	r7, #1
 80002aa:	40fb      	lsrs	r3, r7
 80002ac:	1bc7      	subs	r7, r0, r7
 80002ae:	40be      	lsls	r6, r7
 80002b0:	0032      	movs	r2, r6
 80002b2:	1e56      	subs	r6, r2, #1
 80002b4:	41b2      	sbcs	r2, r6
 80002b6:	2700      	movs	r7, #0
 80002b8:	431a      	orrs	r2, r3
 80002ba:	0753      	lsls	r3, r2, #29
 80002bc:	d004      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002be:	230f      	movs	r3, #15
 80002c0:	4013      	ands	r3, r2
 80002c2:	2b04      	cmp	r3, #4
 80002c4:	d000      	beq.n	80002c8 <__aeabi_fadd+0xa8>
 80002c6:	3204      	adds	r2, #4
 80002c8:	0153      	lsls	r3, r2, #5
 80002ca:	d400      	bmi.n	80002ce <__aeabi_fadd+0xae>
 80002cc:	e09c      	b.n	8000408 <__aeabi_fadd+0x1e8>
 80002ce:	1c7b      	adds	r3, r7, #1
 80002d0:	2ffe      	cmp	r7, #254	; 0xfe
 80002d2:	d100      	bne.n	80002d6 <__aeabi_fadd+0xb6>
 80002d4:	e09a      	b.n	800040c <__aeabi_fadd+0x1ec>
 80002d6:	0192      	lsls	r2, r2, #6
 80002d8:	0a52      	lsrs	r2, r2, #9
 80002da:	4694      	mov	ip, r2
 80002dc:	b2db      	uxtb	r3, r3
 80002de:	05d8      	lsls	r0, r3, #23
 80002e0:	4663      	mov	r3, ip
 80002e2:	07e4      	lsls	r4, r4, #31
 80002e4:	4318      	orrs	r0, r3
 80002e6:	4320      	orrs	r0, r4
 80002e8:	bce0      	pop	{r5, r6, r7}
 80002ea:	46ba      	mov	sl, r7
 80002ec:	46b1      	mov	r9, r6
 80002ee:	46a8      	mov	r8, r5
 80002f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002f2:	2800      	cmp	r0, #0
 80002f4:	d049      	beq.n	800038a <__aeabi_fadd+0x16a>
 80002f6:	1bf3      	subs	r3, r6, r7
 80002f8:	2f00      	cmp	r7, #0
 80002fa:	d000      	beq.n	80002fe <__aeabi_fadd+0xde>
 80002fc:	e0b6      	b.n	800046c <__aeabi_fadd+0x24c>
 80002fe:	4652      	mov	r2, sl
 8000300:	2a00      	cmp	r2, #0
 8000302:	d060      	beq.n	80003c6 <__aeabi_fadd+0x1a6>
 8000304:	3b01      	subs	r3, #1
 8000306:	2b00      	cmp	r3, #0
 8000308:	d100      	bne.n	800030c <__aeabi_fadd+0xec>
 800030a:	e0fc      	b.n	8000506 <__aeabi_fadd+0x2e6>
 800030c:	2eff      	cmp	r6, #255	; 0xff
 800030e:	d000      	beq.n	8000312 <__aeabi_fadd+0xf2>
 8000310:	e0b4      	b.n	800047c <__aeabi_fadd+0x25c>
 8000312:	000c      	movs	r4, r1
 8000314:	4642      	mov	r2, r8
 8000316:	2a00      	cmp	r2, #0
 8000318:	d078      	beq.n	800040c <__aeabi_fadd+0x1ec>
 800031a:	2080      	movs	r0, #128	; 0x80
 800031c:	03c0      	lsls	r0, r0, #15
 800031e:	4310      	orrs	r0, r2
 8000320:	0242      	lsls	r2, r0, #9
 8000322:	0a53      	lsrs	r3, r2, #9
 8000324:	469c      	mov	ip, r3
 8000326:	23ff      	movs	r3, #255	; 0xff
 8000328:	e7d9      	b.n	80002de <__aeabi_fadd+0xbe>
 800032a:	1bb9      	subs	r1, r7, r6
 800032c:	2900      	cmp	r1, #0
 800032e:	dd71      	ble.n	8000414 <__aeabi_fadd+0x1f4>
 8000330:	2e00      	cmp	r6, #0
 8000332:	d03f      	beq.n	80003b4 <__aeabi_fadd+0x194>
 8000334:	2fff      	cmp	r7, #255	; 0xff
 8000336:	d0ee      	beq.n	8000316 <__aeabi_fadd+0xf6>
 8000338:	2380      	movs	r3, #128	; 0x80
 800033a:	04db      	lsls	r3, r3, #19
 800033c:	431d      	orrs	r5, r3
 800033e:	2201      	movs	r2, #1
 8000340:	291b      	cmp	r1, #27
 8000342:	dc07      	bgt.n	8000354 <__aeabi_fadd+0x134>
 8000344:	002a      	movs	r2, r5
 8000346:	2320      	movs	r3, #32
 8000348:	40ca      	lsrs	r2, r1
 800034a:	1a59      	subs	r1, r3, r1
 800034c:	408d      	lsls	r5, r1
 800034e:	1e6b      	subs	r3, r5, #1
 8000350:	419d      	sbcs	r5, r3
 8000352:	432a      	orrs	r2, r5
 8000354:	4452      	add	r2, sl
 8000356:	0153      	lsls	r3, r2, #5
 8000358:	d553      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 800035a:	3701      	adds	r7, #1
 800035c:	2fff      	cmp	r7, #255	; 0xff
 800035e:	d055      	beq.n	800040c <__aeabi_fadd+0x1ec>
 8000360:	2301      	movs	r3, #1
 8000362:	497b      	ldr	r1, [pc, #492]	; (8000550 <__aeabi_fadd+0x330>)
 8000364:	4013      	ands	r3, r2
 8000366:	0852      	lsrs	r2, r2, #1
 8000368:	400a      	ands	r2, r1
 800036a:	431a      	orrs	r2, r3
 800036c:	e7a5      	b.n	80002ba <__aeabi_fadd+0x9a>
 800036e:	2d00      	cmp	r5, #0
 8000370:	d02c      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 8000372:	2301      	movs	r3, #1
 8000374:	425b      	negs	r3, r3
 8000376:	469c      	mov	ip, r3
 8000378:	44e1      	add	r9, ip
 800037a:	464b      	mov	r3, r9
 800037c:	2b00      	cmp	r3, #0
 800037e:	d100      	bne.n	8000382 <__aeabi_fadd+0x162>
 8000380:	e0ad      	b.n	80004de <__aeabi_fadd+0x2be>
 8000382:	2fff      	cmp	r7, #255	; 0xff
 8000384:	d000      	beq.n	8000388 <__aeabi_fadd+0x168>
 8000386:	e76e      	b.n	8000266 <__aeabi_fadd+0x46>
 8000388:	e7c5      	b.n	8000316 <__aeabi_fadd+0xf6>
 800038a:	20fe      	movs	r0, #254	; 0xfe
 800038c:	1c7e      	adds	r6, r7, #1
 800038e:	4230      	tst	r0, r6
 8000390:	d160      	bne.n	8000454 <__aeabi_fadd+0x234>
 8000392:	2f00      	cmp	r7, #0
 8000394:	d000      	beq.n	8000398 <__aeabi_fadd+0x178>
 8000396:	e093      	b.n	80004c0 <__aeabi_fadd+0x2a0>
 8000398:	4652      	mov	r2, sl
 800039a:	2a00      	cmp	r2, #0
 800039c:	d100      	bne.n	80003a0 <__aeabi_fadd+0x180>
 800039e:	e0b6      	b.n	800050e <__aeabi_fadd+0x2ee>
 80003a0:	2d00      	cmp	r5, #0
 80003a2:	d09c      	beq.n	80002de <__aeabi_fadd+0xbe>
 80003a4:	1b52      	subs	r2, r2, r5
 80003a6:	0150      	lsls	r0, r2, #5
 80003a8:	d400      	bmi.n	80003ac <__aeabi_fadd+0x18c>
 80003aa:	e0c3      	b.n	8000534 <__aeabi_fadd+0x314>
 80003ac:	4653      	mov	r3, sl
 80003ae:	000c      	movs	r4, r1
 80003b0:	1aea      	subs	r2, r5, r3
 80003b2:	e782      	b.n	80002ba <__aeabi_fadd+0x9a>
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d009      	beq.n	80003cc <__aeabi_fadd+0x1ac>
 80003b8:	3901      	subs	r1, #1
 80003ba:	2900      	cmp	r1, #0
 80003bc:	d100      	bne.n	80003c0 <__aeabi_fadd+0x1a0>
 80003be:	e08b      	b.n	80004d8 <__aeabi_fadd+0x2b8>
 80003c0:	2fff      	cmp	r7, #255	; 0xff
 80003c2:	d1bc      	bne.n	800033e <__aeabi_fadd+0x11e>
 80003c4:	e7a7      	b.n	8000316 <__aeabi_fadd+0xf6>
 80003c6:	000c      	movs	r4, r1
 80003c8:	4642      	mov	r2, r8
 80003ca:	0037      	movs	r7, r6
 80003cc:	2fff      	cmp	r7, #255	; 0xff
 80003ce:	d0a2      	beq.n	8000316 <__aeabi_fadd+0xf6>
 80003d0:	0252      	lsls	r2, r2, #9
 80003d2:	0a53      	lsrs	r3, r2, #9
 80003d4:	469c      	mov	ip, r3
 80003d6:	b2fb      	uxtb	r3, r7
 80003d8:	e781      	b.n	80002de <__aeabi_fadd+0xbe>
 80003da:	21fe      	movs	r1, #254	; 0xfe
 80003dc:	3701      	adds	r7, #1
 80003de:	4239      	tst	r1, r7
 80003e0:	d165      	bne.n	80004ae <__aeabi_fadd+0x28e>
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d17e      	bne.n	80004e4 <__aeabi_fadd+0x2c4>
 80003e6:	2800      	cmp	r0, #0
 80003e8:	d100      	bne.n	80003ec <__aeabi_fadd+0x1cc>
 80003ea:	e0aa      	b.n	8000542 <__aeabi_fadd+0x322>
 80003ec:	2d00      	cmp	r5, #0
 80003ee:	d100      	bne.n	80003f2 <__aeabi_fadd+0x1d2>
 80003f0:	e775      	b.n	80002de <__aeabi_fadd+0xbe>
 80003f2:	002a      	movs	r2, r5
 80003f4:	4452      	add	r2, sl
 80003f6:	2700      	movs	r7, #0
 80003f8:	0153      	lsls	r3, r2, #5
 80003fa:	d502      	bpl.n	8000402 <__aeabi_fadd+0x1e2>
 80003fc:	4b55      	ldr	r3, [pc, #340]	; (8000554 <__aeabi_fadd+0x334>)
 80003fe:	3701      	adds	r7, #1
 8000400:	401a      	ands	r2, r3
 8000402:	0753      	lsls	r3, r2, #29
 8000404:	d000      	beq.n	8000408 <__aeabi_fadd+0x1e8>
 8000406:	e75a      	b.n	80002be <__aeabi_fadd+0x9e>
 8000408:	08d2      	lsrs	r2, r2, #3
 800040a:	e7df      	b.n	80003cc <__aeabi_fadd+0x1ac>
 800040c:	2200      	movs	r2, #0
 800040e:	23ff      	movs	r3, #255	; 0xff
 8000410:	4694      	mov	ip, r2
 8000412:	e764      	b.n	80002de <__aeabi_fadd+0xbe>
 8000414:	2900      	cmp	r1, #0
 8000416:	d0e0      	beq.n	80003da <__aeabi_fadd+0x1ba>
 8000418:	1bf3      	subs	r3, r6, r7
 800041a:	2f00      	cmp	r7, #0
 800041c:	d03e      	beq.n	800049c <__aeabi_fadd+0x27c>
 800041e:	2eff      	cmp	r6, #255	; 0xff
 8000420:	d100      	bne.n	8000424 <__aeabi_fadd+0x204>
 8000422:	e777      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000424:	2280      	movs	r2, #128	; 0x80
 8000426:	0001      	movs	r1, r0
 8000428:	04d2      	lsls	r2, r2, #19
 800042a:	4311      	orrs	r1, r2
 800042c:	468a      	mov	sl, r1
 800042e:	2201      	movs	r2, #1
 8000430:	2b1b      	cmp	r3, #27
 8000432:	dc08      	bgt.n	8000446 <__aeabi_fadd+0x226>
 8000434:	4652      	mov	r2, sl
 8000436:	2120      	movs	r1, #32
 8000438:	4650      	mov	r0, sl
 800043a:	40da      	lsrs	r2, r3
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	4098      	lsls	r0, r3
 8000440:	1e43      	subs	r3, r0, #1
 8000442:	4198      	sbcs	r0, r3
 8000444:	4302      	orrs	r2, r0
 8000446:	0037      	movs	r7, r6
 8000448:	1952      	adds	r2, r2, r5
 800044a:	e784      	b.n	8000356 <__aeabi_fadd+0x136>
 800044c:	4a41      	ldr	r2, [pc, #260]	; (8000554 <__aeabi_fadd+0x334>)
 800044e:	1a3f      	subs	r7, r7, r0
 8000450:	4032      	ands	r2, r6
 8000452:	e732      	b.n	80002ba <__aeabi_fadd+0x9a>
 8000454:	4653      	mov	r3, sl
 8000456:	1b5e      	subs	r6, r3, r5
 8000458:	0173      	lsls	r3, r6, #5
 800045a:	d42d      	bmi.n	80004b8 <__aeabi_fadd+0x298>
 800045c:	2e00      	cmp	r6, #0
 800045e:	d000      	beq.n	8000462 <__aeabi_fadd+0x242>
 8000460:	e717      	b.n	8000292 <__aeabi_fadd+0x72>
 8000462:	2200      	movs	r2, #0
 8000464:	2400      	movs	r4, #0
 8000466:	2300      	movs	r3, #0
 8000468:	4694      	mov	ip, r2
 800046a:	e738      	b.n	80002de <__aeabi_fadd+0xbe>
 800046c:	2eff      	cmp	r6, #255	; 0xff
 800046e:	d100      	bne.n	8000472 <__aeabi_fadd+0x252>
 8000470:	e74f      	b.n	8000312 <__aeabi_fadd+0xf2>
 8000472:	2280      	movs	r2, #128	; 0x80
 8000474:	4650      	mov	r0, sl
 8000476:	04d2      	lsls	r2, r2, #19
 8000478:	4310      	orrs	r0, r2
 800047a:	4682      	mov	sl, r0
 800047c:	2201      	movs	r2, #1
 800047e:	2b1b      	cmp	r3, #27
 8000480:	dc08      	bgt.n	8000494 <__aeabi_fadd+0x274>
 8000482:	4652      	mov	r2, sl
 8000484:	2420      	movs	r4, #32
 8000486:	4650      	mov	r0, sl
 8000488:	40da      	lsrs	r2, r3
 800048a:	1ae3      	subs	r3, r4, r3
 800048c:	4098      	lsls	r0, r3
 800048e:	1e43      	subs	r3, r0, #1
 8000490:	4198      	sbcs	r0, r3
 8000492:	4302      	orrs	r2, r0
 8000494:	000c      	movs	r4, r1
 8000496:	0037      	movs	r7, r6
 8000498:	1aaa      	subs	r2, r5, r2
 800049a:	e6f5      	b.n	8000288 <__aeabi_fadd+0x68>
 800049c:	2800      	cmp	r0, #0
 800049e:	d093      	beq.n	80003c8 <__aeabi_fadd+0x1a8>
 80004a0:	3b01      	subs	r3, #1
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d04f      	beq.n	8000546 <__aeabi_fadd+0x326>
 80004a6:	2eff      	cmp	r6, #255	; 0xff
 80004a8:	d1c1      	bne.n	800042e <__aeabi_fadd+0x20e>
 80004aa:	4642      	mov	r2, r8
 80004ac:	e733      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004ae:	2fff      	cmp	r7, #255	; 0xff
 80004b0:	d0ac      	beq.n	800040c <__aeabi_fadd+0x1ec>
 80004b2:	4455      	add	r5, sl
 80004b4:	086a      	lsrs	r2, r5, #1
 80004b6:	e7a4      	b.n	8000402 <__aeabi_fadd+0x1e2>
 80004b8:	4653      	mov	r3, sl
 80004ba:	000c      	movs	r4, r1
 80004bc:	1aee      	subs	r6, r5, r3
 80004be:	e6e8      	b.n	8000292 <__aeabi_fadd+0x72>
 80004c0:	4653      	mov	r3, sl
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d128      	bne.n	8000518 <__aeabi_fadd+0x2f8>
 80004c6:	2d00      	cmp	r5, #0
 80004c8:	d000      	beq.n	80004cc <__aeabi_fadd+0x2ac>
 80004ca:	e722      	b.n	8000312 <__aeabi_fadd+0xf2>
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	03db      	lsls	r3, r3, #15
 80004d0:	469c      	mov	ip, r3
 80004d2:	2400      	movs	r4, #0
 80004d4:	23ff      	movs	r3, #255	; 0xff
 80004d6:	e702      	b.n	80002de <__aeabi_fadd+0xbe>
 80004d8:	002a      	movs	r2, r5
 80004da:	4452      	add	r2, sl
 80004dc:	e73b      	b.n	8000356 <__aeabi_fadd+0x136>
 80004de:	4653      	mov	r3, sl
 80004e0:	1b5a      	subs	r2, r3, r5
 80004e2:	e6d1      	b.n	8000288 <__aeabi_fadd+0x68>
 80004e4:	2800      	cmp	r0, #0
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x2ca>
 80004e8:	e714      	b.n	8000314 <__aeabi_fadd+0xf4>
 80004ea:	2d00      	cmp	r5, #0
 80004ec:	d100      	bne.n	80004f0 <__aeabi_fadd+0x2d0>
 80004ee:	e712      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004f0:	2380      	movs	r3, #128	; 0x80
 80004f2:	03db      	lsls	r3, r3, #15
 80004f4:	421a      	tst	r2, r3
 80004f6:	d100      	bne.n	80004fa <__aeabi_fadd+0x2da>
 80004f8:	e70d      	b.n	8000316 <__aeabi_fadd+0xf6>
 80004fa:	4641      	mov	r1, r8
 80004fc:	4219      	tst	r1, r3
 80004fe:	d000      	beq.n	8000502 <__aeabi_fadd+0x2e2>
 8000500:	e709      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000502:	4642      	mov	r2, r8
 8000504:	e707      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000506:	000c      	movs	r4, r1
 8000508:	0037      	movs	r7, r6
 800050a:	1aaa      	subs	r2, r5, r2
 800050c:	e6bc      	b.n	8000288 <__aeabi_fadd+0x68>
 800050e:	2d00      	cmp	r5, #0
 8000510:	d013      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000512:	000c      	movs	r4, r1
 8000514:	46c4      	mov	ip, r8
 8000516:	e6e2      	b.n	80002de <__aeabi_fadd+0xbe>
 8000518:	2d00      	cmp	r5, #0
 800051a:	d100      	bne.n	800051e <__aeabi_fadd+0x2fe>
 800051c:	e6fb      	b.n	8000316 <__aeabi_fadd+0xf6>
 800051e:	2380      	movs	r3, #128	; 0x80
 8000520:	03db      	lsls	r3, r3, #15
 8000522:	421a      	tst	r2, r3
 8000524:	d100      	bne.n	8000528 <__aeabi_fadd+0x308>
 8000526:	e6f6      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000528:	4640      	mov	r0, r8
 800052a:	4218      	tst	r0, r3
 800052c:	d000      	beq.n	8000530 <__aeabi_fadd+0x310>
 800052e:	e6f2      	b.n	8000316 <__aeabi_fadd+0xf6>
 8000530:	000c      	movs	r4, r1
 8000532:	e6ef      	b.n	8000314 <__aeabi_fadd+0xf4>
 8000534:	2a00      	cmp	r2, #0
 8000536:	d000      	beq.n	800053a <__aeabi_fadd+0x31a>
 8000538:	e763      	b.n	8000402 <__aeabi_fadd+0x1e2>
 800053a:	2200      	movs	r2, #0
 800053c:	2400      	movs	r4, #0
 800053e:	4694      	mov	ip, r2
 8000540:	e6cd      	b.n	80002de <__aeabi_fadd+0xbe>
 8000542:	46c4      	mov	ip, r8
 8000544:	e6cb      	b.n	80002de <__aeabi_fadd+0xbe>
 8000546:	002a      	movs	r2, r5
 8000548:	0037      	movs	r7, r6
 800054a:	4452      	add	r2, sl
 800054c:	e703      	b.n	8000356 <__aeabi_fadd+0x136>
 800054e:	46c0      	nop			; (mov r8, r8)
 8000550:	7dffffff 	.word	0x7dffffff
 8000554:	fbffffff 	.word	0xfbffffff

08000558 <__aeabi_fmul>:
 8000558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800055a:	4657      	mov	r7, sl
 800055c:	464e      	mov	r6, r9
 800055e:	4645      	mov	r5, r8
 8000560:	46de      	mov	lr, fp
 8000562:	0244      	lsls	r4, r0, #9
 8000564:	b5e0      	push	{r5, r6, r7, lr}
 8000566:	0045      	lsls	r5, r0, #1
 8000568:	1c0f      	adds	r7, r1, #0
 800056a:	0a64      	lsrs	r4, r4, #9
 800056c:	0e2d      	lsrs	r5, r5, #24
 800056e:	0fc6      	lsrs	r6, r0, #31
 8000570:	2d00      	cmp	r5, #0
 8000572:	d047      	beq.n	8000604 <__aeabi_fmul+0xac>
 8000574:	2dff      	cmp	r5, #255	; 0xff
 8000576:	d04d      	beq.n	8000614 <__aeabi_fmul+0xbc>
 8000578:	2300      	movs	r3, #0
 800057a:	2080      	movs	r0, #128	; 0x80
 800057c:	469a      	mov	sl, r3
 800057e:	469b      	mov	fp, r3
 8000580:	00e4      	lsls	r4, r4, #3
 8000582:	04c0      	lsls	r0, r0, #19
 8000584:	4304      	orrs	r4, r0
 8000586:	3d7f      	subs	r5, #127	; 0x7f
 8000588:	0278      	lsls	r0, r7, #9
 800058a:	0a43      	lsrs	r3, r0, #9
 800058c:	4699      	mov	r9, r3
 800058e:	007a      	lsls	r2, r7, #1
 8000590:	0ffb      	lsrs	r3, r7, #31
 8000592:	4698      	mov	r8, r3
 8000594:	0e12      	lsrs	r2, r2, #24
 8000596:	464b      	mov	r3, r9
 8000598:	d044      	beq.n	8000624 <__aeabi_fmul+0xcc>
 800059a:	2aff      	cmp	r2, #255	; 0xff
 800059c:	d011      	beq.n	80005c2 <__aeabi_fmul+0x6a>
 800059e:	00d8      	lsls	r0, r3, #3
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4303      	orrs	r3, r0
 80005a6:	4699      	mov	r9, r3
 80005a8:	2000      	movs	r0, #0
 80005aa:	3a7f      	subs	r2, #127	; 0x7f
 80005ac:	18ad      	adds	r5, r5, r2
 80005ae:	4647      	mov	r7, r8
 80005b0:	4653      	mov	r3, sl
 80005b2:	4077      	eors	r7, r6
 80005b4:	1c69      	adds	r1, r5, #1
 80005b6:	2b0f      	cmp	r3, #15
 80005b8:	d83f      	bhi.n	800063a <__aeabi_fmul+0xe2>
 80005ba:	4a72      	ldr	r2, [pc, #456]	; (8000784 <__aeabi_fmul+0x22c>)
 80005bc:	009b      	lsls	r3, r3, #2
 80005be:	58d3      	ldr	r3, [r2, r3]
 80005c0:	469f      	mov	pc, r3
 80005c2:	35ff      	adds	r5, #255	; 0xff
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d000      	beq.n	80005ca <__aeabi_fmul+0x72>
 80005c8:	e079      	b.n	80006be <__aeabi_fmul+0x166>
 80005ca:	4652      	mov	r2, sl
 80005cc:	2302      	movs	r3, #2
 80005ce:	431a      	orrs	r2, r3
 80005d0:	4692      	mov	sl, r2
 80005d2:	2002      	movs	r0, #2
 80005d4:	e7eb      	b.n	80005ae <__aeabi_fmul+0x56>
 80005d6:	4647      	mov	r7, r8
 80005d8:	464c      	mov	r4, r9
 80005da:	4683      	mov	fp, r0
 80005dc:	465b      	mov	r3, fp
 80005de:	2b02      	cmp	r3, #2
 80005e0:	d028      	beq.n	8000634 <__aeabi_fmul+0xdc>
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fmul+0x90>
 80005e6:	e0c6      	b.n	8000776 <__aeabi_fmul+0x21e>
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d14f      	bne.n	800068c <__aeabi_fmul+0x134>
 80005ec:	2000      	movs	r0, #0
 80005ee:	2400      	movs	r4, #0
 80005f0:	05c0      	lsls	r0, r0, #23
 80005f2:	07ff      	lsls	r7, r7, #31
 80005f4:	4320      	orrs	r0, r4
 80005f6:	4338      	orrs	r0, r7
 80005f8:	bcf0      	pop	{r4, r5, r6, r7}
 80005fa:	46bb      	mov	fp, r7
 80005fc:	46b2      	mov	sl, r6
 80005fe:	46a9      	mov	r9, r5
 8000600:	46a0      	mov	r8, r4
 8000602:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000604:	2c00      	cmp	r4, #0
 8000606:	d171      	bne.n	80006ec <__aeabi_fmul+0x194>
 8000608:	2304      	movs	r3, #4
 800060a:	469a      	mov	sl, r3
 800060c:	3b03      	subs	r3, #3
 800060e:	2500      	movs	r5, #0
 8000610:	469b      	mov	fp, r3
 8000612:	e7b9      	b.n	8000588 <__aeabi_fmul+0x30>
 8000614:	2c00      	cmp	r4, #0
 8000616:	d163      	bne.n	80006e0 <__aeabi_fmul+0x188>
 8000618:	2308      	movs	r3, #8
 800061a:	469a      	mov	sl, r3
 800061c:	3b06      	subs	r3, #6
 800061e:	25ff      	movs	r5, #255	; 0xff
 8000620:	469b      	mov	fp, r3
 8000622:	e7b1      	b.n	8000588 <__aeabi_fmul+0x30>
 8000624:	2b00      	cmp	r3, #0
 8000626:	d150      	bne.n	80006ca <__aeabi_fmul+0x172>
 8000628:	4652      	mov	r2, sl
 800062a:	3301      	adds	r3, #1
 800062c:	431a      	orrs	r2, r3
 800062e:	4692      	mov	sl, r2
 8000630:	2001      	movs	r0, #1
 8000632:	e7bc      	b.n	80005ae <__aeabi_fmul+0x56>
 8000634:	20ff      	movs	r0, #255	; 0xff
 8000636:	2400      	movs	r4, #0
 8000638:	e7da      	b.n	80005f0 <__aeabi_fmul+0x98>
 800063a:	4648      	mov	r0, r9
 800063c:	0c26      	lsrs	r6, r4, #16
 800063e:	0424      	lsls	r4, r4, #16
 8000640:	0c22      	lsrs	r2, r4, #16
 8000642:	0404      	lsls	r4, r0, #16
 8000644:	0c24      	lsrs	r4, r4, #16
 8000646:	464b      	mov	r3, r9
 8000648:	0020      	movs	r0, r4
 800064a:	0c1b      	lsrs	r3, r3, #16
 800064c:	4350      	muls	r0, r2
 800064e:	4374      	muls	r4, r6
 8000650:	435a      	muls	r2, r3
 8000652:	435e      	muls	r6, r3
 8000654:	1912      	adds	r2, r2, r4
 8000656:	0c03      	lsrs	r3, r0, #16
 8000658:	189b      	adds	r3, r3, r2
 800065a:	429c      	cmp	r4, r3
 800065c:	d903      	bls.n	8000666 <__aeabi_fmul+0x10e>
 800065e:	2280      	movs	r2, #128	; 0x80
 8000660:	0252      	lsls	r2, r2, #9
 8000662:	4694      	mov	ip, r2
 8000664:	4466      	add	r6, ip
 8000666:	0400      	lsls	r0, r0, #16
 8000668:	041a      	lsls	r2, r3, #16
 800066a:	0c00      	lsrs	r0, r0, #16
 800066c:	1812      	adds	r2, r2, r0
 800066e:	0194      	lsls	r4, r2, #6
 8000670:	1e60      	subs	r0, r4, #1
 8000672:	4184      	sbcs	r4, r0
 8000674:	0c1b      	lsrs	r3, r3, #16
 8000676:	0e92      	lsrs	r2, r2, #26
 8000678:	199b      	adds	r3, r3, r6
 800067a:	4314      	orrs	r4, r2
 800067c:	019b      	lsls	r3, r3, #6
 800067e:	431c      	orrs	r4, r3
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	d572      	bpl.n	800076a <__aeabi_fmul+0x212>
 8000684:	2001      	movs	r0, #1
 8000686:	0863      	lsrs	r3, r4, #1
 8000688:	4004      	ands	r4, r0
 800068a:	431c      	orrs	r4, r3
 800068c:	0008      	movs	r0, r1
 800068e:	307f      	adds	r0, #127	; 0x7f
 8000690:	2800      	cmp	r0, #0
 8000692:	dd3c      	ble.n	800070e <__aeabi_fmul+0x1b6>
 8000694:	0763      	lsls	r3, r4, #29
 8000696:	d004      	beq.n	80006a2 <__aeabi_fmul+0x14a>
 8000698:	230f      	movs	r3, #15
 800069a:	4023      	ands	r3, r4
 800069c:	2b04      	cmp	r3, #4
 800069e:	d000      	beq.n	80006a2 <__aeabi_fmul+0x14a>
 80006a0:	3404      	adds	r4, #4
 80006a2:	0123      	lsls	r3, r4, #4
 80006a4:	d503      	bpl.n	80006ae <__aeabi_fmul+0x156>
 80006a6:	3180      	adds	r1, #128	; 0x80
 80006a8:	0008      	movs	r0, r1
 80006aa:	4b37      	ldr	r3, [pc, #220]	; (8000788 <__aeabi_fmul+0x230>)
 80006ac:	401c      	ands	r4, r3
 80006ae:	28fe      	cmp	r0, #254	; 0xfe
 80006b0:	dcc0      	bgt.n	8000634 <__aeabi_fmul+0xdc>
 80006b2:	01a4      	lsls	r4, r4, #6
 80006b4:	0a64      	lsrs	r4, r4, #9
 80006b6:	b2c0      	uxtb	r0, r0
 80006b8:	e79a      	b.n	80005f0 <__aeabi_fmul+0x98>
 80006ba:	0037      	movs	r7, r6
 80006bc:	e78e      	b.n	80005dc <__aeabi_fmul+0x84>
 80006be:	4652      	mov	r2, sl
 80006c0:	2303      	movs	r3, #3
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4692      	mov	sl, r2
 80006c6:	2003      	movs	r0, #3
 80006c8:	e771      	b.n	80005ae <__aeabi_fmul+0x56>
 80006ca:	4648      	mov	r0, r9
 80006cc:	f000 f89a 	bl	8000804 <__clzsi2>
 80006d0:	464a      	mov	r2, r9
 80006d2:	1f43      	subs	r3, r0, #5
 80006d4:	409a      	lsls	r2, r3
 80006d6:	1a2d      	subs	r5, r5, r0
 80006d8:	4691      	mov	r9, r2
 80006da:	2000      	movs	r0, #0
 80006dc:	3d76      	subs	r5, #118	; 0x76
 80006de:	e766      	b.n	80005ae <__aeabi_fmul+0x56>
 80006e0:	230c      	movs	r3, #12
 80006e2:	469a      	mov	sl, r3
 80006e4:	3b09      	subs	r3, #9
 80006e6:	25ff      	movs	r5, #255	; 0xff
 80006e8:	469b      	mov	fp, r3
 80006ea:	e74d      	b.n	8000588 <__aeabi_fmul+0x30>
 80006ec:	0020      	movs	r0, r4
 80006ee:	f000 f889 	bl	8000804 <__clzsi2>
 80006f2:	2576      	movs	r5, #118	; 0x76
 80006f4:	1f43      	subs	r3, r0, #5
 80006f6:	409c      	lsls	r4, r3
 80006f8:	2300      	movs	r3, #0
 80006fa:	426d      	negs	r5, r5
 80006fc:	469a      	mov	sl, r3
 80006fe:	469b      	mov	fp, r3
 8000700:	1a2d      	subs	r5, r5, r0
 8000702:	e741      	b.n	8000588 <__aeabi_fmul+0x30>
 8000704:	2480      	movs	r4, #128	; 0x80
 8000706:	2700      	movs	r7, #0
 8000708:	20ff      	movs	r0, #255	; 0xff
 800070a:	03e4      	lsls	r4, r4, #15
 800070c:	e770      	b.n	80005f0 <__aeabi_fmul+0x98>
 800070e:	2301      	movs	r3, #1
 8000710:	1a1b      	subs	r3, r3, r0
 8000712:	2b1b      	cmp	r3, #27
 8000714:	dd00      	ble.n	8000718 <__aeabi_fmul+0x1c0>
 8000716:	e769      	b.n	80005ec <__aeabi_fmul+0x94>
 8000718:	319e      	adds	r1, #158	; 0x9e
 800071a:	0020      	movs	r0, r4
 800071c:	408c      	lsls	r4, r1
 800071e:	40d8      	lsrs	r0, r3
 8000720:	1e63      	subs	r3, r4, #1
 8000722:	419c      	sbcs	r4, r3
 8000724:	4304      	orrs	r4, r0
 8000726:	0763      	lsls	r3, r4, #29
 8000728:	d004      	beq.n	8000734 <__aeabi_fmul+0x1dc>
 800072a:	230f      	movs	r3, #15
 800072c:	4023      	ands	r3, r4
 800072e:	2b04      	cmp	r3, #4
 8000730:	d000      	beq.n	8000734 <__aeabi_fmul+0x1dc>
 8000732:	3404      	adds	r4, #4
 8000734:	0163      	lsls	r3, r4, #5
 8000736:	d51a      	bpl.n	800076e <__aeabi_fmul+0x216>
 8000738:	2001      	movs	r0, #1
 800073a:	2400      	movs	r4, #0
 800073c:	e758      	b.n	80005f0 <__aeabi_fmul+0x98>
 800073e:	2080      	movs	r0, #128	; 0x80
 8000740:	03c0      	lsls	r0, r0, #15
 8000742:	4204      	tst	r4, r0
 8000744:	d009      	beq.n	800075a <__aeabi_fmul+0x202>
 8000746:	464b      	mov	r3, r9
 8000748:	4203      	tst	r3, r0
 800074a:	d106      	bne.n	800075a <__aeabi_fmul+0x202>
 800074c:	464c      	mov	r4, r9
 800074e:	4304      	orrs	r4, r0
 8000750:	0264      	lsls	r4, r4, #9
 8000752:	4647      	mov	r7, r8
 8000754:	20ff      	movs	r0, #255	; 0xff
 8000756:	0a64      	lsrs	r4, r4, #9
 8000758:	e74a      	b.n	80005f0 <__aeabi_fmul+0x98>
 800075a:	2080      	movs	r0, #128	; 0x80
 800075c:	03c0      	lsls	r0, r0, #15
 800075e:	4304      	orrs	r4, r0
 8000760:	0264      	lsls	r4, r4, #9
 8000762:	0037      	movs	r7, r6
 8000764:	20ff      	movs	r0, #255	; 0xff
 8000766:	0a64      	lsrs	r4, r4, #9
 8000768:	e742      	b.n	80005f0 <__aeabi_fmul+0x98>
 800076a:	0029      	movs	r1, r5
 800076c:	e78e      	b.n	800068c <__aeabi_fmul+0x134>
 800076e:	01a4      	lsls	r4, r4, #6
 8000770:	2000      	movs	r0, #0
 8000772:	0a64      	lsrs	r4, r4, #9
 8000774:	e73c      	b.n	80005f0 <__aeabi_fmul+0x98>
 8000776:	2080      	movs	r0, #128	; 0x80
 8000778:	03c0      	lsls	r0, r0, #15
 800077a:	4304      	orrs	r4, r0
 800077c:	0264      	lsls	r4, r4, #9
 800077e:	20ff      	movs	r0, #255	; 0xff
 8000780:	0a64      	lsrs	r4, r4, #9
 8000782:	e735      	b.n	80005f0 <__aeabi_fmul+0x98>
 8000784:	08002edc 	.word	0x08002edc
 8000788:	f7ffffff 	.word	0xf7ffffff

0800078c <__aeabi_ui2f>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	1e05      	subs	r5, r0, #0
 8000790:	d00e      	beq.n	80007b0 <__aeabi_ui2f+0x24>
 8000792:	f000 f837 	bl	8000804 <__clzsi2>
 8000796:	239e      	movs	r3, #158	; 0x9e
 8000798:	0004      	movs	r4, r0
 800079a:	1a1b      	subs	r3, r3, r0
 800079c:	2b96      	cmp	r3, #150	; 0x96
 800079e:	dc0c      	bgt.n	80007ba <__aeabi_ui2f+0x2e>
 80007a0:	2808      	cmp	r0, #8
 80007a2:	dd01      	ble.n	80007a8 <__aeabi_ui2f+0x1c>
 80007a4:	3c08      	subs	r4, #8
 80007a6:	40a5      	lsls	r5, r4
 80007a8:	026d      	lsls	r5, r5, #9
 80007aa:	0a6d      	lsrs	r5, r5, #9
 80007ac:	b2d8      	uxtb	r0, r3
 80007ae:	e001      	b.n	80007b4 <__aeabi_ui2f+0x28>
 80007b0:	2000      	movs	r0, #0
 80007b2:	2500      	movs	r5, #0
 80007b4:	05c0      	lsls	r0, r0, #23
 80007b6:	4328      	orrs	r0, r5
 80007b8:	bd70      	pop	{r4, r5, r6, pc}
 80007ba:	2b99      	cmp	r3, #153	; 0x99
 80007bc:	dd09      	ble.n	80007d2 <__aeabi_ui2f+0x46>
 80007be:	0002      	movs	r2, r0
 80007c0:	0029      	movs	r1, r5
 80007c2:	321b      	adds	r2, #27
 80007c4:	4091      	lsls	r1, r2
 80007c6:	1e4a      	subs	r2, r1, #1
 80007c8:	4191      	sbcs	r1, r2
 80007ca:	2205      	movs	r2, #5
 80007cc:	1a12      	subs	r2, r2, r0
 80007ce:	40d5      	lsrs	r5, r2
 80007d0:	430d      	orrs	r5, r1
 80007d2:	2c05      	cmp	r4, #5
 80007d4:	dd01      	ble.n	80007da <__aeabi_ui2f+0x4e>
 80007d6:	1f62      	subs	r2, r4, #5
 80007d8:	4095      	lsls	r5, r2
 80007da:	0029      	movs	r1, r5
 80007dc:	4e08      	ldr	r6, [pc, #32]	; (8000800 <__aeabi_ui2f+0x74>)
 80007de:	4031      	ands	r1, r6
 80007e0:	076a      	lsls	r2, r5, #29
 80007e2:	d009      	beq.n	80007f8 <__aeabi_ui2f+0x6c>
 80007e4:	200f      	movs	r0, #15
 80007e6:	4028      	ands	r0, r5
 80007e8:	2804      	cmp	r0, #4
 80007ea:	d005      	beq.n	80007f8 <__aeabi_ui2f+0x6c>
 80007ec:	3104      	adds	r1, #4
 80007ee:	014a      	lsls	r2, r1, #5
 80007f0:	d502      	bpl.n	80007f8 <__aeabi_ui2f+0x6c>
 80007f2:	239f      	movs	r3, #159	; 0x9f
 80007f4:	4031      	ands	r1, r6
 80007f6:	1b1b      	subs	r3, r3, r4
 80007f8:	0189      	lsls	r1, r1, #6
 80007fa:	0a4d      	lsrs	r5, r1, #9
 80007fc:	b2d8      	uxtb	r0, r3
 80007fe:	e7d9      	b.n	80007b4 <__aeabi_ui2f+0x28>
 8000800:	fbffffff 	.word	0xfbffffff

08000804 <__clzsi2>:
 8000804:	211c      	movs	r1, #28
 8000806:	2301      	movs	r3, #1
 8000808:	041b      	lsls	r3, r3, #16
 800080a:	4298      	cmp	r0, r3
 800080c:	d301      	bcc.n	8000812 <__clzsi2+0xe>
 800080e:	0c00      	lsrs	r0, r0, #16
 8000810:	3910      	subs	r1, #16
 8000812:	0a1b      	lsrs	r3, r3, #8
 8000814:	4298      	cmp	r0, r3
 8000816:	d301      	bcc.n	800081c <__clzsi2+0x18>
 8000818:	0a00      	lsrs	r0, r0, #8
 800081a:	3908      	subs	r1, #8
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	4298      	cmp	r0, r3
 8000820:	d301      	bcc.n	8000826 <__clzsi2+0x22>
 8000822:	0900      	lsrs	r0, r0, #4
 8000824:	3904      	subs	r1, #4
 8000826:	a202      	add	r2, pc, #8	; (adr r2, 8000830 <__clzsi2+0x2c>)
 8000828:	5c10      	ldrb	r0, [r2, r0]
 800082a:	1840      	adds	r0, r0, r1
 800082c:	4770      	bx	lr
 800082e:	46c0      	nop			; (mov r8, r8)
 8000830:	02020304 	.word	0x02020304
 8000834:	01010101 	.word	0x01010101
	...

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000846:	f000 fb77 	bl	8000f38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084a:	f000 f875 	bl	8000938 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084e:	f000 f9a5 	bl	8000b9c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000852:	f000 f8ad 	bl	80009b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000856:	f000 f925 	bl	8000aa4 <MX_TIM3_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 800085a:	2390      	movs	r3, #144	; 0x90
 800085c:	05db      	lsls	r3, r3, #23
 800085e:	2200      	movs	r2, #0
 8000860:	2120      	movs	r1, #32
 8000862:	0018      	movs	r0, r3
 8000864:	f000 fe36 	bl	80014d4 <HAL_GPIO_WritePin>
	  		usDelay(3);
 8000868:	2003      	movs	r0, #3
 800086a:	f000 f9cf 	bl	8000c0c <usDelay>

	  		//*** START Ultrasonic measure routine ***//
	  		//1. Output 10 usec TRIG
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_SET);
 800086e:	2390      	movs	r3, #144	; 0x90
 8000870:	05db      	lsls	r3, r3, #23
 8000872:	2201      	movs	r2, #1
 8000874:	2120      	movs	r1, #32
 8000876:	0018      	movs	r0, r3
 8000878:	f000 fe2c 	bl	80014d4 <HAL_GPIO_WritePin>
	  		usDelay(10);
 800087c:	200a      	movs	r0, #10
 800087e:	f000 f9c5 	bl	8000c0c <usDelay>
	  		HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000882:	2390      	movs	r3, #144	; 0x90
 8000884:	05db      	lsls	r3, r3, #23
 8000886:	2200      	movs	r2, #0
 8000888:	2120      	movs	r1, #32
 800088a:	0018      	movs	r0, r3
 800088c:	f000 fe22 	bl	80014d4 <HAL_GPIO_WritePin>

	  		//2. ECHO signal pulse width

	  		//Start IC timer
	  		HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000890:	4b23      	ldr	r3, [pc, #140]	; (8000920 <main+0xe0>)
 8000892:	2100      	movs	r1, #0
 8000894:	0018      	movs	r0, r3
 8000896:	f001 fbc3 	bl	8002020 <HAL_TIM_IC_Start_IT>
	  		//Wait for IC flag
	  		uint32_t startTick = HAL_GetTick();
 800089a:	f000 fba7 	bl	8000fec <HAL_GetTick>
 800089e:	0003      	movs	r3, r0
 80008a0:	607b      	str	r3, [r7, #4]
	  		do
	  		{
	  			if(icFlag) break;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <main+0xe4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d109      	bne.n	80008be <main+0x7e>
	  		}while((HAL_GetTick() - startTick) < 500);  //500ms
 80008aa:	f000 fb9f 	bl	8000fec <HAL_GetTick>
 80008ae:	0002      	movs	r2, r0
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	1ad2      	subs	r2, r2, r3
 80008b4:	23fa      	movs	r3, #250	; 0xfa
 80008b6:	005b      	lsls	r3, r3, #1
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d3f2      	bcc.n	80008a2 <main+0x62>
 80008bc:	e000      	b.n	80008c0 <main+0x80>
	  			if(icFlag) break;
 80008be:	46c0      	nop			; (mov r8, r8)
	  		icFlag = 0;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <main+0xe4>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	701a      	strb	r2, [r3, #0]
	  		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <main+0xe0>)
 80008c8:	2100      	movs	r1, #0
 80008ca:	0018      	movs	r0, r3
 80008cc:	f001 fca0 	bl	8002210 <HAL_TIM_IC_Stop_IT>

	  		//Calculate distance in cm
	  		if(edge2Time > edge1Time)
 80008d0:	4b15      	ldr	r3, [pc, #84]	; (8000928 <main+0xe8>)
 80008d2:	681a      	ldr	r2, [r3, #0]
 80008d4:	4b15      	ldr	r3, [pc, #84]	; (800092c <main+0xec>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	429a      	cmp	r2, r3
 80008da:	d918      	bls.n	800090e <main+0xce>
	  		{
	  			distance = ((edge2Time - edge1Time) + 0.0f)*speedOfSound;
 80008dc:	4b12      	ldr	r3, [pc, #72]	; (8000928 <main+0xe8>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b12      	ldr	r3, [pc, #72]	; (800092c <main+0xec>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	1ad3      	subs	r3, r2, r3
 80008e6:	0018      	movs	r0, r3
 80008e8:	f7ff ff50 	bl	800078c <__aeabi_ui2f>
 80008ec:	1c03      	adds	r3, r0, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	1c18      	adds	r0, r3, #0
 80008f2:	f7ff fc95 	bl	8000220 <__aeabi_fadd>
 80008f6:	1c03      	adds	r3, r0, #0
 80008f8:	1c1a      	adds	r2, r3, #0
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <main+0xf0>)
 80008fc:	1c19      	adds	r1, r3, #0
 80008fe:	1c10      	adds	r0, r2, #0
 8000900:	f7ff fe2a 	bl	8000558 <__aeabi_fmul>
 8000904:	1c03      	adds	r3, r0, #0
 8000906:	1c1a      	adds	r2, r3, #0
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <main+0xf4>)
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	e002      	b.n	8000914 <main+0xd4>
	  		}
	  		else
	  		{
	  			distance = 0.0f;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <main+0xf4>)
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]

	  		//Print to UART terminal for debugging
	  		//sprintf(uartBuf, "Distance (cm)  = %.1f\r\n", distance);
	  		//HAL_UART_Transmit(&huart2, (uint8_t *)uartBuf, strlen(uartBuf), 100);

	  		HAL_Delay(1000);
 8000914:	23fa      	movs	r3, #250	; 0xfa
 8000916:	009b      	lsls	r3, r3, #2
 8000918:	0018      	movs	r0, r3
 800091a:	f000 fb71 	bl	8001000 <HAL_Delay>
  {
 800091e:	e79c      	b.n	800085a <main+0x1a>
 8000920:	20000080 	.word	0x20000080
 8000924:	20000028 	.word	0x20000028
 8000928:	20000030 	.word	0x20000030
 800092c:	2000002c 	.word	0x2000002c
 8000930:	3c8c7e28 	.word	0x3c8c7e28
 8000934:	20000034 	.word	0x20000034

08000938 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000938:	b590      	push	{r4, r7, lr}
 800093a:	b093      	sub	sp, #76	; 0x4c
 800093c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800093e:	2414      	movs	r4, #20
 8000940:	193b      	adds	r3, r7, r4
 8000942:	0018      	movs	r0, r3
 8000944:	2334      	movs	r3, #52	; 0x34
 8000946:	001a      	movs	r2, r3
 8000948:	2100      	movs	r1, #0
 800094a:	f002 faa3 	bl	8002e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	0018      	movs	r0, r3
 8000952:	2310      	movs	r3, #16
 8000954:	001a      	movs	r2, r3
 8000956:	2100      	movs	r1, #0
 8000958:	f002 fa9c 	bl	8002e94 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800095c:	193b      	adds	r3, r7, r4
 800095e:	2220      	movs	r2, #32
 8000960:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2201      	movs	r2, #1
 8000966:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2200      	movs	r2, #0
 800096c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	193b      	adds	r3, r7, r4
 8000970:	0018      	movs	r0, r3
 8000972:	f000 fdcd 	bl	8001510 <HAL_RCC_OscConfig>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800097a:	f000 f9a9 	bl	8000cd0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2207      	movs	r2, #7
 8000982:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000984:	1d3b      	adds	r3, r7, #4
 8000986:	2203      	movs	r2, #3
 8000988:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	2200      	movs	r2, #0
 8000994:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000996:	1d3b      	adds	r3, r7, #4
 8000998:	2101      	movs	r1, #1
 800099a:	0018      	movs	r0, r3
 800099c:	f001 f93e 	bl	8001c1c <HAL_RCC_ClockConfig>
 80009a0:	1e03      	subs	r3, r0, #0
 80009a2:	d001      	beq.n	80009a8 <SystemClock_Config+0x70>
  {
    Error_Handler();
 80009a4:	f000 f994 	bl	8000cd0 <Error_Handler>
  }
}
 80009a8:	46c0      	nop			; (mov r8, r8)
 80009aa:	46bd      	mov	sp, r7
 80009ac:	b013      	add	sp, #76	; 0x4c
 80009ae:	bd90      	pop	{r4, r7, pc}

080009b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b08a      	sub	sp, #40	; 0x28
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009b6:	2318      	movs	r3, #24
 80009b8:	18fb      	adds	r3, r7, r3
 80009ba:	0018      	movs	r0, r3
 80009bc:	2310      	movs	r3, #16
 80009be:	001a      	movs	r2, r3
 80009c0:	2100      	movs	r1, #0
 80009c2:	f002 fa67 	bl	8002e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009c6:	2310      	movs	r3, #16
 80009c8:	18fb      	adds	r3, r7, r3
 80009ca:	0018      	movs	r0, r3
 80009cc:	2308      	movs	r3, #8
 80009ce:	001a      	movs	r2, r3
 80009d0:	2100      	movs	r1, #0
 80009d2:	f002 fa5f 	bl	8002e94 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80009d6:	003b      	movs	r3, r7
 80009d8:	0018      	movs	r0, r3
 80009da:	2310      	movs	r3, #16
 80009dc:	001a      	movs	r2, r3
 80009de:	2100      	movs	r1, #0
 80009e0:	f002 fa58 	bl	8002e94 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009e4:	4b2e      	ldr	r3, [pc, #184]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	05d2      	lsls	r2, r2, #23
 80009ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 48-1;
 80009ec:	4b2c      	ldr	r3, [pc, #176]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 80009ee:	222f      	movs	r2, #47	; 0x2f
 80009f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009f2:	4b2b      	ldr	r3, [pc, #172]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80009f8:	4b29      	ldr	r3, [pc, #164]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	4252      	negs	r2, r2
 80009fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a00:	4b27      	ldr	r3, [pc, #156]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a0c:	4b24      	ldr	r3, [pc, #144]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f001 fa5e 	bl	8001ed0 <HAL_TIM_Base_Init>
 8000a14:	1e03      	subs	r3, r0, #0
 8000a16:	d001      	beq.n	8000a1c <MX_TIM2_Init+0x6c>
  {
    Error_Handler();
 8000a18:	f000 f95a 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a1c:	2118      	movs	r1, #24
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2280      	movs	r2, #128	; 0x80
 8000a22:	0152      	lsls	r2, r2, #5
 8000a24:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a26:	187a      	adds	r2, r7, r1
 8000a28:	4b1d      	ldr	r3, [pc, #116]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a2a:	0011      	movs	r1, r2
 8000a2c:	0018      	movs	r0, r3
 8000a2e:	f001 fe35 	bl	800269c <HAL_TIM_ConfigClockSource>
 8000a32:	1e03      	subs	r3, r0, #0
 8000a34:	d001      	beq.n	8000a3a <MX_TIM2_Init+0x8a>
  {
    Error_Handler();
 8000a36:	f000 f94b 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a3c:	0018      	movs	r0, r3
 8000a3e:	f001 fa97 	bl	8001f70 <HAL_TIM_IC_Init>
 8000a42:	1e03      	subs	r3, r0, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000a46:	f000 f943 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a58:	187a      	adds	r2, r7, r1
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a5c:	0011      	movs	r1, r2
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f002 f98c 	bl	8002d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000a64:	1e03      	subs	r3, r0, #0
 8000a66:	d001      	beq.n	8000a6c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8000a68:	f000 f932 	bl	8000cd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000a6c:	003b      	movs	r3, r7
 8000a6e:	220a      	movs	r2, #10
 8000a70:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000a72:	003b      	movs	r3, r7
 8000a74:	2201      	movs	r2, #1
 8000a76:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000a78:	003b      	movs	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000a7e:	003b      	movs	r3, r7
 8000a80:	2200      	movs	r2, #0
 8000a82:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000a84:	0039      	movs	r1, r7
 8000a86:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <MX_TIM2_Init+0xf0>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	0018      	movs	r0, r3
 8000a8c:	f001 fd70 	bl	8002570 <HAL_TIM_IC_ConfigChannel>
 8000a90:	1e03      	subs	r3, r0, #0
 8000a92:	d001      	beq.n	8000a98 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000a94:	f000 f91c 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	b00a      	add	sp, #40	; 0x28
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	20000080 	.word	0x20000080

08000aa4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	; 0x28
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aaa:	2318      	movs	r3, #24
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	0018      	movs	r0, r3
 8000ab0:	2310      	movs	r3, #16
 8000ab2:	001a      	movs	r2, r3
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f002 f9ed 	bl	8002e94 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	2310      	movs	r3, #16
 8000abc:	18fb      	adds	r3, r7, r3
 8000abe:	0018      	movs	r0, r3
 8000ac0:	2308      	movs	r3, #8
 8000ac2:	001a      	movs	r2, r3
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	f002 f9e5 	bl	8002e94 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000aca:	003b      	movs	r3, r7
 8000acc:	0018      	movs	r0, r3
 8000ace:	2310      	movs	r3, #16
 8000ad0:	001a      	movs	r2, r3
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	f002 f9de 	bl	8002e94 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ad8:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000ada:	4a2e      	ldr	r2, [pc, #184]	; (8000b94 <MX_TIM3_Init+0xf0>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 48-1;
 8000ade:	4b2c      	ldr	r3, [pc, #176]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000ae0:	222f      	movs	r2, #47	; 0x2f
 8000ae2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b2a      	ldr	r3, [pc, #168]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000aea:	4b29      	ldr	r3, [pc, #164]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000aec:	4a2a      	ldr	r2, [pc, #168]	; (8000b98 <MX_TIM3_Init+0xf4>)
 8000aee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af0:	4b27      	ldr	r3, [pc, #156]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af6:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000afc:	4b24      	ldr	r3, [pc, #144]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000afe:	0018      	movs	r0, r3
 8000b00:	f001 f9e6 	bl	8001ed0 <HAL_TIM_Base_Init>
 8000b04:	1e03      	subs	r3, r0, #0
 8000b06:	d001      	beq.n	8000b0c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000b08:	f000 f8e2 	bl	8000cd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b0c:	2118      	movs	r1, #24
 8000b0e:	187b      	adds	r3, r7, r1
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	0152      	lsls	r2, r2, #5
 8000b14:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000b16:	187a      	adds	r2, r7, r1
 8000b18:	4b1d      	ldr	r3, [pc, #116]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f001 fdbd 	bl	800269c <HAL_TIM_ConfigClockSource>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000b26:	f000 f8d3 	bl	8000cd0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000b2a:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000b2c:	0018      	movs	r0, r3
 8000b2e:	f001 fa1f 	bl	8001f70 <HAL_TIM_IC_Init>
 8000b32:	1e03      	subs	r3, r0, #0
 8000b34:	d001      	beq.n	8000b3a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000b36:	f000 f8cb 	bl	8000cd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b3a:	2110      	movs	r1, #16
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000b48:	187a      	adds	r2, r7, r1
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 f914 	bl	8002d7c <HAL_TIMEx_MasterConfigSynchronization>
 8000b54:	1e03      	subs	r3, r0, #0
 8000b56:	d001      	beq.n	8000b5c <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 8000b58:	f000 f8ba 	bl	8000cd0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b62:	003b      	movs	r3, r7
 8000b64:	2201      	movs	r2, #1
 8000b66:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b68:	003b      	movs	r3, r7
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000b6e:	003b      	movs	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b74:	0039      	movs	r1, r7
 8000b76:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_TIM3_Init+0xec>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	0018      	movs	r0, r3
 8000b7c:	f001 fcf8 	bl	8002570 <HAL_TIM_IC_ConfigChannel>
 8000b80:	1e03      	subs	r3, r0, #0
 8000b82:	d001      	beq.n	8000b88 <MX_TIM3_Init+0xe4>
  {
    Error_Handler();
 8000b84:	f000 f8a4 	bl	8000cd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000b88:	46c0      	nop			; (mov r8, r8)
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	b00a      	add	sp, #40	; 0x28
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000038 	.word	0x20000038
 8000b94:	40000400 	.word	0x40000400
 8000b98:	0000ffff 	.word	0x0000ffff

08000b9c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b086      	sub	sp, #24
 8000ba0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba2:	1d3b      	adds	r3, r7, #4
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	2314      	movs	r3, #20
 8000ba8:	001a      	movs	r2, r3
 8000baa:	2100      	movs	r1, #0
 8000bac:	f002 f972 	bl	8002e94 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_GPIO_Init+0x6c>)
 8000bb2:	695a      	ldr	r2, [r3, #20]
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <MX_GPIO_Init+0x6c>)
 8000bb6:	2180      	movs	r1, #128	; 0x80
 8000bb8:	0289      	lsls	r1, r1, #10
 8000bba:	430a      	orrs	r2, r1
 8000bbc:	615a      	str	r2, [r3, #20]
 8000bbe:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <MX_GPIO_Init+0x6c>)
 8000bc0:	695a      	ldr	r2, [r3, #20]
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	029b      	lsls	r3, r3, #10
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	603b      	str	r3, [r7, #0]
 8000bca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TRIG_GPIO_Port, TRIG_Pin, GPIO_PIN_RESET);
 8000bcc:	2390      	movs	r3, #144	; 0x90
 8000bce:	05db      	lsls	r3, r3, #23
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2120      	movs	r1, #32
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f000 fc7d 	bl	80014d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TRIG_Pin */
  GPIO_InitStruct.Pin = TRIG_Pin;
 8000bda:	1d3b      	adds	r3, r7, #4
 8000bdc:	2220      	movs	r2, #32
 8000bde:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	2201      	movs	r2, #1
 8000be4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	1d3b      	adds	r3, r7, #4
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(TRIG_GPIO_Port, &GPIO_InitStruct);
 8000bf2:	1d3a      	adds	r2, r7, #4
 8000bf4:	2390      	movs	r3, #144	; 0x90
 8000bf6:	05db      	lsls	r3, r3, #23
 8000bf8:	0011      	movs	r1, r2
 8000bfa:	0018      	movs	r0, r3
 8000bfc:	f000 fb02 	bl	8001204 <HAL_GPIO_Init>

}
 8000c00:	46c0      	nop			; (mov r8, r8)
 8000c02:	46bd      	mov	sp, r7
 8000c04:	b006      	add	sp, #24
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	40021000 	.word	0x40021000

08000c0c <usDelay>:

/* USER CODE BEGIN 4 */
void usDelay(uint32_t uSec)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	if(uSec < 2) uSec = 2;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d801      	bhi.n	8000c1e <usDelay+0x12>
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	607b      	str	r3, [r7, #4]
	usTIM->ARR = uSec - 1; 	/*sets the value in the auto-reload register*/
 8000c1e:	4b12      	ldr	r3, [pc, #72]	; (8000c68 <usDelay+0x5c>)
 8000c20:	687a      	ldr	r2, [r7, #4]
 8000c22:	3a01      	subs	r2, #1
 8000c24:	62da      	str	r2, [r3, #44]	; 0x2c
	usTIM->EGR = 1; 			/*Re-initialises the timer*/
 8000c26:	4b10      	ldr	r3, [pc, #64]	; (8000c68 <usDelay+0x5c>)
 8000c28:	2201      	movs	r2, #1
 8000c2a:	615a      	str	r2, [r3, #20]
	usTIM->SR &= ~1; 		//Resets the flag
 8000c2c:	4b0e      	ldr	r3, [pc, #56]	; (8000c68 <usDelay+0x5c>)
 8000c2e:	691a      	ldr	r2, [r3, #16]
 8000c30:	4b0d      	ldr	r3, [pc, #52]	; (8000c68 <usDelay+0x5c>)
 8000c32:	2101      	movs	r1, #1
 8000c34:	438a      	bics	r2, r1
 8000c36:	611a      	str	r2, [r3, #16]
	usTIM->CR1 |= 1; 		//Enables the counter
 8000c38:	4b0b      	ldr	r3, [pc, #44]	; (8000c68 <usDelay+0x5c>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b0a      	ldr	r3, [pc, #40]	; (8000c68 <usDelay+0x5c>)
 8000c3e:	2101      	movs	r1, #1
 8000c40:	430a      	orrs	r2, r1
 8000c42:	601a      	str	r2, [r3, #0]
	while((usTIM->SR&0x0001) != 1);
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <usDelay+0x5c>)
 8000c48:	691b      	ldr	r3, [r3, #16]
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d1f9      	bne.n	8000c46 <usDelay+0x3a>
	usTIM->SR &= ~(0x0001);
 8000c52:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <usDelay+0x5c>)
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	4b04      	ldr	r3, [pc, #16]	; (8000c68 <usDelay+0x5c>)
 8000c58:	2101      	movs	r1, #1
 8000c5a:	438a      	bics	r2, r1
 8000c5c:	611a      	str	r2, [r3, #16]
}
 8000c5e:	46c0      	nop			; (mov r8, r8)
 8000c60:	46bd      	mov	sp, r7
 8000c62:	b002      	add	sp, #8
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	46c0      	nop			; (mov r8, r8)
 8000c68:	40000400 	.word	0x40000400

08000c6c <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]

//	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);

		if(captureIdx == 0) //Fisrt edge
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10b      	bne.n	8000c94 <HAL_TIM_IC_CaptureCallback+0x28>
		{
			edge1Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); //__HAL_TIM_GetCounter(&htim3);//
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	2100      	movs	r1, #0
 8000c80:	0018      	movs	r0, r3
 8000c82:	f001 fdd5 	bl	8002830 <HAL_TIM_ReadCapturedValue>
 8000c86:	0002      	movs	r2, r0
 8000c88:	4b0e      	ldr	r3, [pc, #56]	; (8000cc4 <HAL_TIM_IC_CaptureCallback+0x58>)
 8000c8a:	601a      	str	r2, [r3, #0]

			captureIdx = 1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000c8e:	2201      	movs	r2, #1
 8000c90:	701a      	strb	r2, [r3, #0]
		{
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
			captureIdx = 0;
			icFlag = 1;
		}
}
 8000c92:	e011      	b.n	8000cb8 <HAL_TIM_IC_CaptureCallback+0x4c>
		else if(captureIdx == 1) //Second edge
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d10d      	bne.n	8000cb8 <HAL_TIM_IC_CaptureCallback+0x4c>
			edge2Time = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fdc5 	bl	8002830 <HAL_TIM_ReadCapturedValue>
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	4b07      	ldr	r3, [pc, #28]	; (8000cc8 <HAL_TIM_IC_CaptureCallback+0x5c>)
 8000caa:	601a      	str	r2, [r3, #0]
			captureIdx = 0;
 8000cac:	4b04      	ldr	r3, [pc, #16]	; (8000cc0 <HAL_TIM_IC_CaptureCallback+0x54>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	701a      	strb	r2, [r3, #0]
			icFlag = 1;
 8000cb2:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <HAL_TIM_IC_CaptureCallback+0x60>)
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	701a      	strb	r2, [r3, #0]
}
 8000cb8:	46c0      	nop			; (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000029 	.word	0x20000029
 8000cc4:	2000002c 	.word	0x2000002c
 8000cc8:	20000030 	.word	0x20000030
 8000ccc:	20000028 	.word	0x20000028

08000cd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd4:	b672      	cpsid	i
}
 8000cd6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <Error_Handler+0x8>
	...

08000cdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce2:	4b0f      	ldr	r3, [pc, #60]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce4:	699a      	ldr	r2, [r3, #24]
 8000ce6:	4b0e      	ldr	r3, [pc, #56]	; (8000d20 <HAL_MspInit+0x44>)
 8000ce8:	2101      	movs	r1, #1
 8000cea:	430a      	orrs	r2, r1
 8000cec:	619a      	str	r2, [r3, #24]
 8000cee:	4b0c      	ldr	r3, [pc, #48]	; (8000d20 <HAL_MspInit+0x44>)
 8000cf0:	699b      	ldr	r3, [r3, #24]
 8000cf2:	2201      	movs	r2, #1
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	4b09      	ldr	r3, [pc, #36]	; (8000d20 <HAL_MspInit+0x44>)
 8000cfc:	69da      	ldr	r2, [r3, #28]
 8000cfe:	4b08      	ldr	r3, [pc, #32]	; (8000d20 <HAL_MspInit+0x44>)
 8000d00:	2180      	movs	r1, #128	; 0x80
 8000d02:	0549      	lsls	r1, r1, #21
 8000d04:	430a      	orrs	r2, r1
 8000d06:	61da      	str	r2, [r3, #28]
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <HAL_MspInit+0x44>)
 8000d0a:	69da      	ldr	r2, [r3, #28]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	055b      	lsls	r3, r3, #21
 8000d10:	4013      	ands	r3, r2
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	46c0      	nop			; (mov r8, r8)
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	b002      	add	sp, #8
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	46c0      	nop			; (mov r8, r8)
 8000d20:	40021000 	.word	0x40021000

08000d24 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d24:	b590      	push	{r4, r7, lr}
 8000d26:	b08d      	sub	sp, #52	; 0x34
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d2c:	241c      	movs	r4, #28
 8000d2e:	193b      	adds	r3, r7, r4
 8000d30:	0018      	movs	r0, r3
 8000d32:	2314      	movs	r3, #20
 8000d34:	001a      	movs	r2, r3
 8000d36:	2100      	movs	r1, #0
 8000d38:	f002 f8ac 	bl	8002e94 <memset>
  if(htim_base->Instance==TIM2)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681a      	ldr	r2, [r3, #0]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	05db      	lsls	r3, r3, #23
 8000d44:	429a      	cmp	r2, r3
 8000d46:	d139      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d4a:	69da      	ldr	r2, [r3, #28]
 8000d4c:	4b3c      	ldr	r3, [pc, #240]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d4e:	2101      	movs	r1, #1
 8000d50:	430a      	orrs	r2, r1
 8000d52:	61da      	str	r2, [r3, #28]
 8000d54:	4b3a      	ldr	r3, [pc, #232]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d56:	69db      	ldr	r3, [r3, #28]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4013      	ands	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
 8000d5e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d60:	4b37      	ldr	r3, [pc, #220]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d62:	695a      	ldr	r2, [r3, #20]
 8000d64:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d66:	2180      	movs	r1, #128	; 0x80
 8000d68:	0289      	lsls	r1, r1, #10
 8000d6a:	430a      	orrs	r2, r1
 8000d6c:	615a      	str	r2, [r3, #20]
 8000d6e:	4b34      	ldr	r3, [pc, #208]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000d70:	695a      	ldr	r2, [r3, #20]
 8000d72:	2380      	movs	r3, #128	; 0x80
 8000d74:	029b      	lsls	r3, r3, #10
 8000d76:	4013      	ands	r3, r2
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d7c:	0021      	movs	r1, r4
 8000d7e:	187b      	adds	r3, r7, r1
 8000d80:	2201      	movs	r2, #1
 8000d82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	187b      	adds	r3, r7, r1
 8000d86:	2202      	movs	r2, #2
 8000d88:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	187b      	adds	r3, r7, r1
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	187b      	adds	r3, r7, r1
 8000d92:	2200      	movs	r2, #0
 8000d94:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 8000d96:	187b      	adds	r3, r7, r1
 8000d98:	2202      	movs	r2, #2
 8000d9a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9c:	187a      	adds	r2, r7, r1
 8000d9e:	2390      	movs	r3, #144	; 0x90
 8000da0:	05db      	lsls	r3, r3, #23
 8000da2:	0011      	movs	r1, r2
 8000da4:	0018      	movs	r0, r3
 8000da6:	f000 fa2d 	bl	8001204 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2100      	movs	r1, #0
 8000dae:	200f      	movs	r0, #15
 8000db0:	f000 f9f6 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000db4:	200f      	movs	r0, #15
 8000db6:	f000 fa08 	bl	80011ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000dba:	e03d      	b.n	8000e38 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4a20      	ldr	r2, [pc, #128]	; (8000e44 <HAL_TIM_Base_MspInit+0x120>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d138      	bne.n	8000e38 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000dc6:	4b1e      	ldr	r3, [pc, #120]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000dc8:	69da      	ldr	r2, [r3, #28]
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000dcc:	2102      	movs	r1, #2
 8000dce:	430a      	orrs	r2, r1
 8000dd0:	61da      	str	r2, [r3, #28]
 8000dd2:	4b1b      	ldr	r3, [pc, #108]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000dd4:	69db      	ldr	r3, [r3, #28]
 8000dd6:	2202      	movs	r2, #2
 8000dd8:	4013      	ands	r3, r2
 8000dda:	613b      	str	r3, [r7, #16]
 8000ddc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000de0:	695a      	ldr	r2, [r3, #20]
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	0289      	lsls	r1, r1, #10
 8000de8:	430a      	orrs	r2, r1
 8000dea:	615a      	str	r2, [r3, #20]
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_TIM_Base_MspInit+0x11c>)
 8000dee:	695a      	ldr	r2, [r3, #20]
 8000df0:	2380      	movs	r3, #128	; 0x80
 8000df2:	029b      	lsls	r3, r3, #10
 8000df4:	4013      	ands	r3, r2
 8000df6:	60fb      	str	r3, [r7, #12]
 8000df8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dfa:	211c      	movs	r1, #28
 8000dfc:	187b      	adds	r3, r7, r1
 8000dfe:	2240      	movs	r2, #64	; 0x40
 8000e00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	187b      	adds	r3, r7, r1
 8000e04:	2202      	movs	r2, #2
 8000e06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e08:	187b      	adds	r3, r7, r1
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0e:	187b      	adds	r3, r7, r1
 8000e10:	2200      	movs	r2, #0
 8000e12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8000e14:	187b      	adds	r3, r7, r1
 8000e16:	2201      	movs	r2, #1
 8000e18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e1a:	187a      	adds	r2, r7, r1
 8000e1c:	2390      	movs	r3, #144	; 0x90
 8000e1e:	05db      	lsls	r3, r3, #23
 8000e20:	0011      	movs	r1, r2
 8000e22:	0018      	movs	r0, r3
 8000e24:	f000 f9ee 	bl	8001204 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	2010      	movs	r0, #16
 8000e2e:	f000 f9b7 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000e32:	2010      	movs	r0, #16
 8000e34:	f000 f9c9 	bl	80011ca <HAL_NVIC_EnableIRQ>
}
 8000e38:	46c0      	nop			; (mov r8, r8)
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	b00d      	add	sp, #52	; 0x34
 8000e3e:	bd90      	pop	{r4, r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	40000400 	.word	0x40000400

08000e48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <NMI_Handler+0x4>

08000e4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <HardFault_Handler+0x4>

08000e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e58:	46c0      	nop			; (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}

08000e5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e62:	46c0      	nop			; (mov r8, r8)
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e6c:	f000 f8ac 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
	...

08000e78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000e7c:	4b03      	ldr	r3, [pc, #12]	; (8000e8c <TIM2_IRQHandler+0x14>)
 8000e7e:	0018      	movs	r0, r3
 8000e80:	f001 fa60 	bl	8002344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			; (mov r8, r8)
 8000e8c:	20000080 	.word	0x20000080

08000e90 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000e94:	4b03      	ldr	r3, [pc, #12]	; (8000ea4 <TIM3_IRQHandler+0x14>)
 8000e96:	0018      	movs	r0, r3
 8000e98:	f001 fa54 	bl	8002344 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	46c0      	nop			; (mov r8, r8)
 8000ea4:	20000038 	.word	0x20000038

08000ea8 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
	...

08000eb4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000eb4:	4813      	ldr	r0, [pc, #76]	; (8000f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000eb6:	4685      	mov	sp, r0

/*Check if boot space corresponds to test memory*/
 
    LDR R0,=0x00000004
 8000eb8:	4813      	ldr	r0, [pc, #76]	; (8000f08 <LoopForever+0x6>)
    LDR R1, [R0]
 8000eba:	6801      	ldr	r1, [r0, #0]
    LSRS R1, R1, #24
 8000ebc:	0e09      	lsrs	r1, r1, #24
    LDR R2,=0x1F
 8000ebe:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <LoopForever+0xa>)
    CMP R1, R2
 8000ec0:	4291      	cmp	r1, r2
    BNE ApplicationStart
 8000ec2:	d105      	bne.n	8000ed0 <ApplicationStart>

 /*SYSCFG clock enable*/

    LDR R0,=0x40021018
 8000ec4:	4812      	ldr	r0, [pc, #72]	; (8000f10 <LoopForever+0xe>)
    LDR R1,=0x00000001
 8000ec6:	4913      	ldr	r1, [pc, #76]	; (8000f14 <LoopForever+0x12>)
    STR R1, [R0]
 8000ec8:	6001      	str	r1, [r0, #0]

/*Set CFGR1 register with flash memory remap at address 0*/
    LDR R0,=0x40010000
 8000eca:	4813      	ldr	r0, [pc, #76]	; (8000f18 <LoopForever+0x16>)
    LDR R1,=0x00000000
 8000ecc:	4913      	ldr	r1, [pc, #76]	; (8000f1c <LoopForever+0x1a>)
    STR R1, [R0]
 8000ece:	6001      	str	r1, [r0, #0]

08000ed0 <ApplicationStart>:

ApplicationStart:
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ed0:	4813      	ldr	r0, [pc, #76]	; (8000f20 <LoopForever+0x1e>)
  ldr r1, =_edata
 8000ed2:	4914      	ldr	r1, [pc, #80]	; (8000f24 <LoopForever+0x22>)
  ldr r2, =_sidata
 8000ed4:	4a14      	ldr	r2, [pc, #80]	; (8000f28 <LoopForever+0x26>)
  movs r3, #0
 8000ed6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ed8:	e002      	b.n	8000ee0 <LoopCopyDataInit>

08000eda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000edc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ede:	3304      	adds	r3, #4

08000ee0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ee0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ee2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ee4:	d3f9      	bcc.n	8000eda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ee6:	4a11      	ldr	r2, [pc, #68]	; (8000f2c <LoopForever+0x2a>)
  ldr r4, =_ebss
 8000ee8:	4c11      	ldr	r4, [pc, #68]	; (8000f30 <LoopForever+0x2e>)
  movs r3, #0
 8000eea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eec:	e001      	b.n	8000ef2 <LoopFillZerobss>

08000eee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ef0:	3204      	adds	r2, #4

08000ef2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ef2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ef4:	d3fb      	bcc.n	8000eee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ef6:	f7ff ffd7 	bl	8000ea8 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000efa:	f001 ffa7 	bl	8002e4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000efe:	f7ff fc9f 	bl	8000840 <main>

08000f02 <LoopForever>:

LoopForever:
    b LoopForever
 8000f02:	e7fe      	b.n	8000f02 <LoopForever>
  ldr   r0, =_estack
 8000f04:	20001800 	.word	0x20001800
    LDR R0,=0x00000004
 8000f08:	00000004 	.word	0x00000004
    LDR R2,=0x1F
 8000f0c:	0000001f 	.word	0x0000001f
    LDR R0,=0x40021018
 8000f10:	40021018 	.word	0x40021018
    LDR R1,=0x00000001
 8000f14:	00000001 	.word	0x00000001
    LDR R0,=0x40010000
 8000f18:	40010000 	.word	0x40010000
    LDR R1,=0x00000000
 8000f1c:	00000000 	.word	0x00000000
  ldr r0, =_sdata
 8000f20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f24:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000f28:	08002f34 	.word	0x08002f34
  ldr r2, =_sbss
 8000f2c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000f30:	200000cc 	.word	0x200000cc

08000f34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f34:	e7fe      	b.n	8000f34 <ADC1_IRQHandler>
	...

08000f38 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <HAL_Init+0x24>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b06      	ldr	r3, [pc, #24]	; (8000f5c <HAL_Init+0x24>)
 8000f42:	2110      	movs	r1, #16
 8000f44:	430a      	orrs	r2, r1
 8000f46:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000f48:	2000      	movs	r0, #0
 8000f4a:	f000 f809 	bl	8000f60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f4e:	f7ff fec5 	bl	8000cdc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f52:	2300      	movs	r3, #0
}
 8000f54:	0018      	movs	r0, r3
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	46c0      	nop			; (mov r8, r8)
 8000f5c:	40022000 	.word	0x40022000

08000f60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f60:	b590      	push	{r4, r7, lr}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_InitTick+0x5c>)
 8000f6a:	681c      	ldr	r4, [r3, #0]
 8000f6c:	4b14      	ldr	r3, [pc, #80]	; (8000fc0 <HAL_InitTick+0x60>)
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	0019      	movs	r1, r3
 8000f72:	23fa      	movs	r3, #250	; 0xfa
 8000f74:	0098      	lsls	r0, r3, #2
 8000f76:	f7ff f8c7 	bl	8000108 <__udivsi3>
 8000f7a:	0003      	movs	r3, r0
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	0020      	movs	r0, r4
 8000f80:	f7ff f8c2 	bl	8000108 <__udivsi3>
 8000f84:	0003      	movs	r3, r0
 8000f86:	0018      	movs	r0, r3
 8000f88:	f000 f92f 	bl	80011ea <HAL_SYSTICK_Config>
 8000f8c:	1e03      	subs	r3, r0, #0
 8000f8e:	d001      	beq.n	8000f94 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f90:	2301      	movs	r3, #1
 8000f92:	e00f      	b.n	8000fb4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b03      	cmp	r3, #3
 8000f98:	d80b      	bhi.n	8000fb2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9a:	6879      	ldr	r1, [r7, #4]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f000 f8fc 	bl	80011a0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <HAL_InitTick+0x64>)
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	b003      	add	sp, #12
 8000fba:	bd90      	pop	{r4, r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000008 	.word	0x20000008
 8000fc4:	20000004 	.word	0x20000004

08000fc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fcc:	4b05      	ldr	r3, [pc, #20]	; (8000fe4 <HAL_IncTick+0x1c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	4b05      	ldr	r3, [pc, #20]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	18d2      	adds	r2, r2, r3
 8000fd8:	4b03      	ldr	r3, [pc, #12]	; (8000fe8 <HAL_IncTick+0x20>)
 8000fda:	601a      	str	r2, [r3, #0]
}
 8000fdc:	46c0      	nop			; (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			; (mov r8, r8)
 8000fe4:	20000008 	.word	0x20000008
 8000fe8:	200000c8 	.word	0x200000c8

08000fec <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff0:	4b02      	ldr	r3, [pc, #8]	; (8000ffc <HAL_GetTick+0x10>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	200000c8 	.word	0x200000c8

08001000 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001008:	f7ff fff0 	bl	8000fec <HAL_GetTick>
 800100c:	0003      	movs	r3, r0
 800100e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	3301      	adds	r3, #1
 8001018:	d005      	beq.n	8001026 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800101a:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <HAL_Delay+0x44>)
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	001a      	movs	r2, r3
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	189b      	adds	r3, r3, r2
 8001024:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	f7ff ffe0 	bl	8000fec <HAL_GetTick>
 800102c:	0002      	movs	r2, r0
 800102e:	68bb      	ldr	r3, [r7, #8]
 8001030:	1ad3      	subs	r3, r2, r3
 8001032:	68fa      	ldr	r2, [r7, #12]
 8001034:	429a      	cmp	r2, r3
 8001036:	d8f7      	bhi.n	8001028 <HAL_Delay+0x28>
  {
  }
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46c0      	nop			; (mov r8, r8)
 800103c:	46bd      	mov	sp, r7
 800103e:	b004      	add	sp, #16
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			; (mov r8, r8)
 8001044:	20000008 	.word	0x20000008

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	0002      	movs	r2, r0
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b7f      	cmp	r3, #127	; 0x7f
 800105a:	d809      	bhi.n	8001070 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	001a      	movs	r2, r3
 8001062:	231f      	movs	r3, #31
 8001064:	401a      	ands	r2, r3
 8001066:	4b04      	ldr	r3, [pc, #16]	; (8001078 <__NVIC_EnableIRQ+0x30>)
 8001068:	2101      	movs	r1, #1
 800106a:	4091      	lsls	r1, r2
 800106c:	000a      	movs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
  }
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b7f      	cmp	r3, #127	; 0x7f
 8001090:	d828      	bhi.n	80010e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001092:	4a2f      	ldr	r2, [pc, #188]	; (8001150 <__NVIC_SetPriority+0xd4>)
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	33c0      	adds	r3, #192	; 0xc0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	589b      	ldr	r3, [r3, r2]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	; 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	; 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <__NVIC_SetPriority+0xd4>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	430a      	orrs	r2, r1
 80010dc:	33c0      	adds	r3, #192	; 0xc0
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e2:	e031      	b.n	8001148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4a1b      	ldr	r2, [pc, #108]	; (8001154 <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	0019      	movs	r1, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	400b      	ands	r3, r1
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3306      	adds	r3, #6
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1dfa      	adds	r2, r7, #7
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	2203      	movs	r2, #3
 8001106:	400a      	ands	r2, r1
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	21ff      	movs	r1, #255	; 0xff
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	22ff      	movs	r2, #255	; 0xff
 800111c:	401a      	ands	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	2303      	movs	r3, #3
 8001126:	4003      	ands	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4809      	ldr	r0, [pc, #36]	; (8001154 <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	001c      	movs	r4, r3
 8001134:	230f      	movs	r3, #15
 8001136:	4023      	ands	r3, r4
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	430a      	orrs	r2, r1
 800113e:	3306      	adds	r3, #6
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	18c3      	adds	r3, r0, r3
 8001144:	3304      	adds	r3, #4
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			; (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	2380      	movs	r3, #128	; 0x80
 8001166:	045b      	lsls	r3, r3, #17
 8001168:	429a      	cmp	r2, r3
 800116a:	d301      	bcc.n	8001170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116c:	2301      	movs	r3, #1
 800116e:	e010      	b.n	8001192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <SysTick_Config+0x44>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	3a01      	subs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	2103      	movs	r1, #3
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff7c 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <SysTick_Config+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	; (800119c <SysTick_Config+0x44>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			; (mov r8, r8)
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	210f      	movs	r1, #15
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	0002      	movs	r2, r0
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff33 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ffaf 	bl	8001158 <SysTick_Config>
 80011fa:	0003      	movs	r3, r0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001212:	e149      	b.n	80014a8 <HAL_GPIO_Init+0x2a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x28>
 800122a:	e13a      	b.n	80014a2 <HAL_GPIO_Init+0x29e>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b01      	cmp	r3, #1
 8001232:	d00b      	beq.n	800124c <HAL_GPIO_Init+0x48>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001240:	2b11      	cmp	r3, #17
 8001242:	d003      	beq.n	800124c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	2b12      	cmp	r3, #18
 800124a:	d130      	bne.n	80012ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	005b      	lsls	r3, r3, #1
 8001256:	2203      	movs	r2, #3
 8001258:	409a      	lsls	r2, r3
 800125a:	0013      	movs	r3, r2
 800125c:	43da      	mvns	r2, r3
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	4013      	ands	r3, r2
 8001262:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	68da      	ldr	r2, [r3, #12]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	005b      	lsls	r3, r3, #1
 800126c:	409a      	lsls	r2, r3
 800126e:	0013      	movs	r3, r2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4313      	orrs	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001282:	2201      	movs	r2, #1
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
 8001288:	0013      	movs	r3, r2
 800128a:	43da      	mvns	r2, r3
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	091b      	lsrs	r3, r3, #4
 8001298:	2201      	movs	r2, #1
 800129a:	401a      	ands	r2, r3
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	409a      	lsls	r2, r3
 80012a0:	0013      	movs	r3, r2
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80012b4:	697b      	ldr	r3, [r7, #20]
 80012b6:	005b      	lsls	r3, r3, #1
 80012b8:	2203      	movs	r2, #3
 80012ba:	409a      	lsls	r2, r3
 80012bc:	0013      	movs	r3, r2
 80012be:	43da      	mvns	r2, r3
 80012c0:	693b      	ldr	r3, [r7, #16]
 80012c2:	4013      	ands	r3, r2
 80012c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	005b      	lsls	r3, r3, #1
 80012ce:	409a      	lsls	r2, r3
 80012d0:	0013      	movs	r3, r2
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	693a      	ldr	r2, [r7, #16]
 80012dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0xea>
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b12      	cmp	r3, #18
 80012ec:	d123      	bne.n	8001336 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	08da      	lsrs	r2, r3, #3
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	3208      	adds	r2, #8
 80012f6:	0092      	lsls	r2, r2, #2
 80012f8:	58d3      	ldr	r3, [r2, r3]
 80012fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	2207      	movs	r2, #7
 8001300:	4013      	ands	r3, r2
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	220f      	movs	r2, #15
 8001306:	409a      	lsls	r2, r3
 8001308:	0013      	movs	r3, r2
 800130a:	43da      	mvns	r2, r3
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	691a      	ldr	r2, [r3, #16]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	2107      	movs	r1, #7
 800131a:	400b      	ands	r3, r1
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	08da      	lsrs	r2, r3, #3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3208      	adds	r2, #8
 8001330:	0092      	lsls	r2, r2, #2
 8001332:	6939      	ldr	r1, [r7, #16]
 8001334:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	005b      	lsls	r3, r3, #1
 8001340:	2203      	movs	r2, #3
 8001342:	409a      	lsls	r2, r3
 8001344:	0013      	movs	r3, r2
 8001346:	43da      	mvns	r2, r3
 8001348:	693b      	ldr	r3, [r7, #16]
 800134a:	4013      	ands	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	2203      	movs	r2, #3
 8001354:	401a      	ands	r2, r3
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	409a      	lsls	r2, r3
 800135c:	0013      	movs	r3, r2
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	055b      	lsls	r3, r3, #21
 8001372:	4013      	ands	r3, r2
 8001374:	d100      	bne.n	8001378 <HAL_GPIO_Init+0x174>
 8001376:	e094      	b.n	80014a2 <HAL_GPIO_Init+0x29e>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001378:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <HAL_GPIO_Init+0x2bc>)
 800137a:	699a      	ldr	r2, [r3, #24]
 800137c:	4b50      	ldr	r3, [pc, #320]	; (80014c0 <HAL_GPIO_Init+0x2bc>)
 800137e:	2101      	movs	r1, #1
 8001380:	430a      	orrs	r2, r1
 8001382:	619a      	str	r2, [r3, #24]
 8001384:	4b4e      	ldr	r3, [pc, #312]	; (80014c0 <HAL_GPIO_Init+0x2bc>)
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	2201      	movs	r2, #1
 800138a:	4013      	ands	r3, r2
 800138c:	60bb      	str	r3, [r7, #8]
 800138e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001390:	4a4c      	ldr	r2, [pc, #304]	; (80014c4 <HAL_GPIO_Init+0x2c0>)
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	089b      	lsrs	r3, r3, #2
 8001396:	3302      	adds	r3, #2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	589b      	ldr	r3, [r3, r2]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	2203      	movs	r2, #3
 80013a2:	4013      	ands	r3, r2
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	220f      	movs	r2, #15
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	43da      	mvns	r2, r3
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4013      	ands	r3, r2
 80013b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	2390      	movs	r3, #144	; 0x90
 80013b8:	05db      	lsls	r3, r3, #23
 80013ba:	429a      	cmp	r2, r3
 80013bc:	d00d      	beq.n	80013da <HAL_GPIO_Init+0x1d6>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a41      	ldr	r2, [pc, #260]	; (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d007      	beq.n	80013d6 <HAL_GPIO_Init+0x1d2>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a40      	ldr	r2, [pc, #256]	; (80014cc <HAL_GPIO_Init+0x2c8>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d101      	bne.n	80013d2 <HAL_GPIO_Init+0x1ce>
 80013ce:	2302      	movs	r3, #2
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d2:	2305      	movs	r3, #5
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013da:	2300      	movs	r3, #0
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	0092      	lsls	r2, r2, #2
 80013e4:	4093      	lsls	r3, r2
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80013ec:	4935      	ldr	r1, [pc, #212]	; (80014c4 <HAL_GPIO_Init+0x2c0>)
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3302      	adds	r3, #2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013fa:	4b35      	ldr	r3, [pc, #212]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	43da      	mvns	r2, r3
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685a      	ldr	r2, [r3, #4]
 800140e:	2380      	movs	r3, #128	; 0x80
 8001410:	025b      	lsls	r3, r3, #9
 8001412:	4013      	ands	r3, r2
 8001414:	d003      	beq.n	800141e <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001416:	693a      	ldr	r2, [r7, #16]
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800141e:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001424:	4b2a      	ldr	r3, [pc, #168]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	43da      	mvns	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685a      	ldr	r2, [r3, #4]
 8001438:	2380      	movs	r3, #128	; 0x80
 800143a:	029b      	lsls	r3, r3, #10
 800143c:	4013      	ands	r3, r2
 800143e:	d003      	beq.n	8001448 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	4313      	orrs	r3, r2
 8001446:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001448:	4b21      	ldr	r3, [pc, #132]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800144e:	4b20      	ldr	r3, [pc, #128]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 8001450:	689b      	ldr	r3, [r3, #8]
 8001452:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	43da      	mvns	r2, r3
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4013      	ands	r3, r2
 800145c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685a      	ldr	r2, [r3, #4]
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	035b      	lsls	r3, r3, #13
 8001466:	4013      	ands	r3, r2
 8001468:	d003      	beq.n	8001472 <HAL_GPIO_Init+0x26e>
        {
          temp |= iocurrent;
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001472:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001478:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	43da      	mvns	r2, r3
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001488:	683b      	ldr	r3, [r7, #0]
 800148a:	685a      	ldr	r2, [r3, #4]
 800148c:	2380      	movs	r3, #128	; 0x80
 800148e:	039b      	lsls	r3, r3, #14
 8001490:	4013      	ands	r3, r2
 8001492:	d003      	beq.n	800149c <HAL_GPIO_Init+0x298>
        {
          temp |= iocurrent;
 8001494:	693a      	ldr	r2, [r7, #16]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <HAL_GPIO_Init+0x2cc>)
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	3301      	adds	r3, #1
 80014a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	40da      	lsrs	r2, r3
 80014b0:	1e13      	subs	r3, r2, #0
 80014b2:	d000      	beq.n	80014b6 <HAL_GPIO_Init+0x2b2>
 80014b4:	e6ae      	b.n	8001214 <HAL_GPIO_Init+0x10>
  } 
}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	46c0      	nop			; (mov r8, r8)
 80014ba:	46bd      	mov	sp, r7
 80014bc:	b006      	add	sp, #24
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40010000 	.word	0x40010000
 80014c8:	48000400 	.word	0x48000400
 80014cc:	48000800 	.word	0x48000800
 80014d0:	40010400 	.word	0x40010400

080014d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
 80014dc:	0008      	movs	r0, r1
 80014de:	0011      	movs	r1, r2
 80014e0:	1cbb      	adds	r3, r7, #2
 80014e2:	1c02      	adds	r2, r0, #0
 80014e4:	801a      	strh	r2, [r3, #0]
 80014e6:	1c7b      	adds	r3, r7, #1
 80014e8:	1c0a      	adds	r2, r1, #0
 80014ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014ec:	1c7b      	adds	r3, r7, #1
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d004      	beq.n	80014fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f4:	1cbb      	adds	r3, r7, #2
 80014f6:	881a      	ldrh	r2, [r3, #0]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80014fc:	e003      	b.n	8001506 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80014fe:	1cbb      	adds	r3, r7, #2
 8001500:	881a      	ldrh	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001506:	46c0      	nop			; (mov r8, r8)
 8001508:	46bd      	mov	sp, r7
 800150a:	b002      	add	sp, #8
 800150c:	bd80      	pop	{r7, pc}
	...

08001510 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b088      	sub	sp, #32
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 fb76 	bl	8001c10 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2201      	movs	r2, #1
 800152a:	4013      	ands	r3, r2
 800152c:	d100      	bne.n	8001530 <HAL_RCC_OscConfig+0x20>
 800152e:	e08e      	b.n	800164e <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001530:	4bc5      	ldr	r3, [pc, #788]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001532:	685b      	ldr	r3, [r3, #4]
 8001534:	220c      	movs	r2, #12
 8001536:	4013      	ands	r3, r2
 8001538:	2b04      	cmp	r3, #4
 800153a:	d00e      	beq.n	800155a <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800153c:	4bc2      	ldr	r3, [pc, #776]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	220c      	movs	r2, #12
 8001542:	4013      	ands	r3, r2
 8001544:	2b08      	cmp	r3, #8
 8001546:	d117      	bne.n	8001578 <HAL_RCC_OscConfig+0x68>
 8001548:	4bbf      	ldr	r3, [pc, #764]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800154a:	685a      	ldr	r2, [r3, #4]
 800154c:	23c0      	movs	r3, #192	; 0xc0
 800154e:	025b      	lsls	r3, r3, #9
 8001550:	401a      	ands	r2, r3
 8001552:	2380      	movs	r3, #128	; 0x80
 8001554:	025b      	lsls	r3, r3, #9
 8001556:	429a      	cmp	r2, r3
 8001558:	d10e      	bne.n	8001578 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800155a:	4bbb      	ldr	r3, [pc, #748]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	2380      	movs	r3, #128	; 0x80
 8001560:	029b      	lsls	r3, r3, #10
 8001562:	4013      	ands	r3, r2
 8001564:	d100      	bne.n	8001568 <HAL_RCC_OscConfig+0x58>
 8001566:	e071      	b.n	800164c <HAL_RCC_OscConfig+0x13c>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d000      	beq.n	8001572 <HAL_RCC_OscConfig+0x62>
 8001570:	e06c      	b.n	800164c <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	f000 fb4c 	bl	8001c10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d107      	bne.n	8001590 <HAL_RCC_OscConfig+0x80>
 8001580:	4bb1      	ldr	r3, [pc, #708]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4bb0      	ldr	r3, [pc, #704]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001586:	2180      	movs	r1, #128	; 0x80
 8001588:	0249      	lsls	r1, r1, #9
 800158a:	430a      	orrs	r2, r1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	e02f      	b.n	80015f0 <HAL_RCC_OscConfig+0xe0>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10c      	bne.n	80015b2 <HAL_RCC_OscConfig+0xa2>
 8001598:	4bab      	ldr	r3, [pc, #684]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4baa      	ldr	r3, [pc, #680]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800159e:	49ab      	ldr	r1, [pc, #684]	; (800184c <HAL_RCC_OscConfig+0x33c>)
 80015a0:	400a      	ands	r2, r1
 80015a2:	601a      	str	r2, [r3, #0]
 80015a4:	4ba8      	ldr	r3, [pc, #672]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4ba7      	ldr	r3, [pc, #668]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015aa:	49a9      	ldr	r1, [pc, #676]	; (8001850 <HAL_RCC_OscConfig+0x340>)
 80015ac:	400a      	ands	r2, r1
 80015ae:	601a      	str	r2, [r3, #0]
 80015b0:	e01e      	b.n	80015f0 <HAL_RCC_OscConfig+0xe0>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	2b05      	cmp	r3, #5
 80015b8:	d10e      	bne.n	80015d8 <HAL_RCC_OscConfig+0xc8>
 80015ba:	4ba3      	ldr	r3, [pc, #652]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4ba2      	ldr	r3, [pc, #648]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015c0:	2180      	movs	r1, #128	; 0x80
 80015c2:	02c9      	lsls	r1, r1, #11
 80015c4:	430a      	orrs	r2, r1
 80015c6:	601a      	str	r2, [r3, #0]
 80015c8:	4b9f      	ldr	r3, [pc, #636]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	4b9e      	ldr	r3, [pc, #632]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015ce:	2180      	movs	r1, #128	; 0x80
 80015d0:	0249      	lsls	r1, r1, #9
 80015d2:	430a      	orrs	r2, r1
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xe0>
 80015d8:	4b9b      	ldr	r3, [pc, #620]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b9a      	ldr	r3, [pc, #616]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015de:	499b      	ldr	r1, [pc, #620]	; (800184c <HAL_RCC_OscConfig+0x33c>)
 80015e0:	400a      	ands	r2, r1
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	4b98      	ldr	r3, [pc, #608]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015e6:	681a      	ldr	r2, [r3, #0]
 80015e8:	4b97      	ldr	r3, [pc, #604]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80015ea:	4999      	ldr	r1, [pc, #612]	; (8001850 <HAL_RCC_OscConfig+0x340>)
 80015ec:	400a      	ands	r2, r1
 80015ee:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d014      	beq.n	8001622 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f8:	f7ff fcf8 	bl	8000fec <HAL_GetTick>
 80015fc:	0003      	movs	r3, r0
 80015fe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001602:	f7ff fcf3 	bl	8000fec <HAL_GetTick>
 8001606:	0002      	movs	r2, r0
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	; 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e2fd      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001614:	4b8c      	ldr	r3, [pc, #560]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	2380      	movs	r3, #128	; 0x80
 800161a:	029b      	lsls	r3, r3, #10
 800161c:	4013      	ands	r3, r2
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0xf2>
 8001620:	e015      	b.n	800164e <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001622:	f7ff fce3 	bl	8000fec <HAL_GetTick>
 8001626:	0003      	movs	r3, r0
 8001628:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800162a:	e008      	b.n	800163e <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800162c:	f7ff fcde 	bl	8000fec <HAL_GetTick>
 8001630:	0002      	movs	r2, r0
 8001632:	69bb      	ldr	r3, [r7, #24]
 8001634:	1ad3      	subs	r3, r2, r3
 8001636:	2b64      	cmp	r3, #100	; 0x64
 8001638:	d901      	bls.n	800163e <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 800163a:	2303      	movs	r3, #3
 800163c:	e2e8      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163e:	4b82      	ldr	r3, [pc, #520]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d1f0      	bne.n	800162c <HAL_RCC_OscConfig+0x11c>
 800164a:	e000      	b.n	800164e <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800164c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2202      	movs	r2, #2
 8001654:	4013      	ands	r3, r2
 8001656:	d100      	bne.n	800165a <HAL_RCC_OscConfig+0x14a>
 8001658:	e06c      	b.n	8001734 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800165a:	4b7b      	ldr	r3, [pc, #492]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	220c      	movs	r2, #12
 8001660:	4013      	ands	r3, r2
 8001662:	d00e      	beq.n	8001682 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001664:	4b78      	ldr	r3, [pc, #480]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	220c      	movs	r2, #12
 800166a:	4013      	ands	r3, r2
 800166c:	2b08      	cmp	r3, #8
 800166e:	d11f      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1a0>
 8001670:	4b75      	ldr	r3, [pc, #468]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001672:	685a      	ldr	r2, [r3, #4]
 8001674:	23c0      	movs	r3, #192	; 0xc0
 8001676:	025b      	lsls	r3, r3, #9
 8001678:	401a      	ands	r2, r3
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	021b      	lsls	r3, r3, #8
 800167e:	429a      	cmp	r2, r3
 8001680:	d116      	bne.n	80016b0 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001682:	4b71      	ldr	r3, [pc, #452]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	2202      	movs	r2, #2
 8001688:	4013      	ands	r3, r2
 800168a:	d005      	beq.n	8001698 <HAL_RCC_OscConfig+0x188>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d001      	beq.n	8001698 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e2bb      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001698:	4b6b      	ldr	r3, [pc, #428]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	22f8      	movs	r2, #248	; 0xf8
 800169e:	4393      	bics	r3, r2
 80016a0:	0019      	movs	r1, r3
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	691b      	ldr	r3, [r3, #16]
 80016a6:	00da      	lsls	r2, r3, #3
 80016a8:	4b67      	ldr	r3, [pc, #412]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016aa:	430a      	orrs	r2, r1
 80016ac:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ae:	e041      	b.n	8001734 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	68db      	ldr	r3, [r3, #12]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d024      	beq.n	8001702 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b8:	4b63      	ldr	r3, [pc, #396]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b62      	ldr	r3, [pc, #392]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016be:	2101      	movs	r1, #1
 80016c0:	430a      	orrs	r2, r1
 80016c2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c4:	f7ff fc92 	bl	8000fec <HAL_GetTick>
 80016c8:	0003      	movs	r3, r0
 80016ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016cc:	e008      	b.n	80016e0 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016ce:	f7ff fc8d 	bl	8000fec <HAL_GetTick>
 80016d2:	0002      	movs	r2, r0
 80016d4:	69bb      	ldr	r3, [r7, #24]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d901      	bls.n	80016e0 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80016dc:	2303      	movs	r3, #3
 80016de:	e297      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e0:	4b59      	ldr	r3, [pc, #356]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	2202      	movs	r2, #2
 80016e6:	4013      	ands	r3, r2
 80016e8:	d0f1      	beq.n	80016ce <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b57      	ldr	r3, [pc, #348]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22f8      	movs	r2, #248	; 0xf8
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00da      	lsls	r2, r3, #3
 80016fa:	4b53      	ldr	r3, [pc, #332]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
 8001700:	e018      	b.n	8001734 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001702:	4b51      	ldr	r3, [pc, #324]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	4b50      	ldr	r3, [pc, #320]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001708:	2101      	movs	r1, #1
 800170a:	438a      	bics	r2, r1
 800170c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800170e:	f7ff fc6d 	bl	8000fec <HAL_GetTick>
 8001712:	0003      	movs	r3, r0
 8001714:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff fc68 	bl	8000fec <HAL_GetTick>
 800171c:	0002      	movs	r2, r0
 800171e:	69bb      	ldr	r3, [r7, #24]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e272      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b47      	ldr	r3, [pc, #284]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	2202      	movs	r2, #2
 8001730:	4013      	ands	r3, r2
 8001732:	d1f1      	bne.n	8001718 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2208      	movs	r2, #8
 800173a:	4013      	ands	r3, r2
 800173c:	d036      	beq.n	80017ac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d019      	beq.n	800177a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001746:	4b40      	ldr	r3, [pc, #256]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001748:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800174a:	4b3f      	ldr	r3, [pc, #252]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800174c:	2101      	movs	r1, #1
 800174e:	430a      	orrs	r2, r1
 8001750:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001752:	f7ff fc4b 	bl	8000fec <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800175c:	f7ff fc46 	bl	8000fec <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e250      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176e:	4b36      	ldr	r3, [pc, #216]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001772:	2202      	movs	r2, #2
 8001774:	4013      	ands	r3, r2
 8001776:	d0f1      	beq.n	800175c <HAL_RCC_OscConfig+0x24c>
 8001778:	e018      	b.n	80017ac <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800177c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800177e:	4b32      	ldr	r3, [pc, #200]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 8001780:	2101      	movs	r1, #1
 8001782:	438a      	bics	r2, r1
 8001784:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fc31 	bl	8000fec <HAL_GetTick>
 800178a:	0003      	movs	r3, r0
 800178c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800178e:	e008      	b.n	80017a2 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001790:	f7ff fc2c 	bl	8000fec <HAL_GetTick>
 8001794:	0002      	movs	r2, r0
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	2b02      	cmp	r3, #2
 800179c:	d901      	bls.n	80017a2 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800179e:	2303      	movs	r3, #3
 80017a0:	e236      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a2:	4b29      	ldr	r3, [pc, #164]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80017a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a6:	2202      	movs	r2, #2
 80017a8:	4013      	ands	r3, r2
 80017aa:	d1f1      	bne.n	8001790 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2204      	movs	r2, #4
 80017b2:	4013      	ands	r3, r2
 80017b4:	d100      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2a8>
 80017b6:	e0b5      	b.n	8001924 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017b8:	201f      	movs	r0, #31
 80017ba:	183b      	adds	r3, r7, r0
 80017bc:	2200      	movs	r2, #0
 80017be:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c0:	4b21      	ldr	r3, [pc, #132]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80017c2:	69da      	ldr	r2, [r3, #28]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	055b      	lsls	r3, r3, #21
 80017c8:	4013      	ands	r3, r2
 80017ca:	d110      	bne.n	80017ee <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017cc:	4b1e      	ldr	r3, [pc, #120]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80017ce:	69da      	ldr	r2, [r3, #28]
 80017d0:	4b1d      	ldr	r3, [pc, #116]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80017d2:	2180      	movs	r1, #128	; 0x80
 80017d4:	0549      	lsls	r1, r1, #21
 80017d6:	430a      	orrs	r2, r1
 80017d8:	61da      	str	r2, [r3, #28]
 80017da:	4b1b      	ldr	r3, [pc, #108]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 80017dc:	69da      	ldr	r2, [r3, #28]
 80017de:	2380      	movs	r3, #128	; 0x80
 80017e0:	055b      	lsls	r3, r3, #21
 80017e2:	4013      	ands	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
 80017e6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80017e8:	183b      	adds	r3, r7, r0
 80017ea:	2201      	movs	r2, #1
 80017ec:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b19      	ldr	r3, [pc, #100]	; (8001854 <HAL_RCC_OscConfig+0x344>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	2380      	movs	r3, #128	; 0x80
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4013      	ands	r3, r2
 80017f8:	d11a      	bne.n	8001830 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b16      	ldr	r3, [pc, #88]	; (8001854 <HAL_RCC_OscConfig+0x344>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <HAL_RCC_OscConfig+0x344>)
 8001800:	2180      	movs	r1, #128	; 0x80
 8001802:	0049      	lsls	r1, r1, #1
 8001804:	430a      	orrs	r2, r1
 8001806:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001808:	f7ff fbf0 	bl	8000fec <HAL_GetTick>
 800180c:	0003      	movs	r3, r0
 800180e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fbeb 	bl	8000fec <HAL_GetTick>
 8001816:	0002      	movs	r2, r0
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e1f5      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001824:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <HAL_RCC_OscConfig+0x344>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4013      	ands	r3, r2
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d10f      	bne.n	8001858 <HAL_RCC_OscConfig+0x348>
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800183a:	6a1a      	ldr	r2, [r3, #32]
 800183c:	4b02      	ldr	r3, [pc, #8]	; (8001848 <HAL_RCC_OscConfig+0x338>)
 800183e:	2101      	movs	r1, #1
 8001840:	430a      	orrs	r2, r1
 8001842:	621a      	str	r2, [r3, #32]
 8001844:	e036      	b.n	80018b4 <HAL_RCC_OscConfig+0x3a4>
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	40021000 	.word	0x40021000
 800184c:	fffeffff 	.word	0xfffeffff
 8001850:	fffbffff 	.word	0xfffbffff
 8001854:	40007000 	.word	0x40007000
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10c      	bne.n	800187a <HAL_RCC_OscConfig+0x36a>
 8001860:	4bca      	ldr	r3, [pc, #808]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001862:	6a1a      	ldr	r2, [r3, #32]
 8001864:	4bc9      	ldr	r3, [pc, #804]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001866:	2101      	movs	r1, #1
 8001868:	438a      	bics	r2, r1
 800186a:	621a      	str	r2, [r3, #32]
 800186c:	4bc7      	ldr	r3, [pc, #796]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800186e:	6a1a      	ldr	r2, [r3, #32]
 8001870:	4bc6      	ldr	r3, [pc, #792]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001872:	2104      	movs	r1, #4
 8001874:	438a      	bics	r2, r1
 8001876:	621a      	str	r2, [r3, #32]
 8001878:	e01c      	b.n	80018b4 <HAL_RCC_OscConfig+0x3a4>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	689b      	ldr	r3, [r3, #8]
 800187e:	2b05      	cmp	r3, #5
 8001880:	d10c      	bne.n	800189c <HAL_RCC_OscConfig+0x38c>
 8001882:	4bc2      	ldr	r3, [pc, #776]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001884:	6a1a      	ldr	r2, [r3, #32]
 8001886:	4bc1      	ldr	r3, [pc, #772]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001888:	2104      	movs	r1, #4
 800188a:	430a      	orrs	r2, r1
 800188c:	621a      	str	r2, [r3, #32]
 800188e:	4bbf      	ldr	r3, [pc, #764]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001890:	6a1a      	ldr	r2, [r3, #32]
 8001892:	4bbe      	ldr	r3, [pc, #760]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001894:	2101      	movs	r1, #1
 8001896:	430a      	orrs	r2, r1
 8001898:	621a      	str	r2, [r3, #32]
 800189a:	e00b      	b.n	80018b4 <HAL_RCC_OscConfig+0x3a4>
 800189c:	4bbb      	ldr	r3, [pc, #748]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	4bba      	ldr	r3, [pc, #744]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	438a      	bics	r2, r1
 80018a6:	621a      	str	r2, [r3, #32]
 80018a8:	4bb8      	ldr	r3, [pc, #736]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80018aa:	6a1a      	ldr	r2, [r3, #32]
 80018ac:	4bb7      	ldr	r3, [pc, #732]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80018ae:	2104      	movs	r1, #4
 80018b0:	438a      	bics	r2, r1
 80018b2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d014      	beq.n	80018e6 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018bc:	f7ff fb96 	bl	8000fec <HAL_GetTick>
 80018c0:	0003      	movs	r3, r0
 80018c2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c4:	e009      	b.n	80018da <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018c6:	f7ff fb91 	bl	8000fec <HAL_GetTick>
 80018ca:	0002      	movs	r2, r0
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	4aaf      	ldr	r2, [pc, #700]	; (8001b90 <HAL_RCC_OscConfig+0x680>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d901      	bls.n	80018da <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80018d6:	2303      	movs	r3, #3
 80018d8:	e19a      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018da:	4bac      	ldr	r3, [pc, #688]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80018dc:	6a1b      	ldr	r3, [r3, #32]
 80018de:	2202      	movs	r2, #2
 80018e0:	4013      	ands	r3, r2
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x3b6>
 80018e4:	e013      	b.n	800190e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e6:	f7ff fb81 	bl	8000fec <HAL_GetTick>
 80018ea:	0003      	movs	r3, r0
 80018ec:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ee:	e009      	b.n	8001904 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018f0:	f7ff fb7c 	bl	8000fec <HAL_GetTick>
 80018f4:	0002      	movs	r2, r0
 80018f6:	69bb      	ldr	r3, [r7, #24]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	4aa5      	ldr	r2, [pc, #660]	; (8001b90 <HAL_RCC_OscConfig+0x680>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e185      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001904:	4ba1      	ldr	r3, [pc, #644]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	2202      	movs	r2, #2
 800190a:	4013      	ands	r3, r2
 800190c:	d1f0      	bne.n	80018f0 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800190e:	231f      	movs	r3, #31
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d105      	bne.n	8001924 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001918:	4b9c      	ldr	r3, [pc, #624]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800191a:	69da      	ldr	r2, [r3, #28]
 800191c:	4b9b      	ldr	r3, [pc, #620]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800191e:	499d      	ldr	r1, [pc, #628]	; (8001b94 <HAL_RCC_OscConfig+0x684>)
 8001920:	400a      	ands	r2, r1
 8001922:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2210      	movs	r2, #16
 800192a:	4013      	ands	r3, r2
 800192c:	d063      	beq.n	80019f6 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d12a      	bne.n	800198c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001936:	4b95      	ldr	r3, [pc, #596]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001938:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800193a:	4b94      	ldr	r3, [pc, #592]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800193c:	2104      	movs	r1, #4
 800193e:	430a      	orrs	r2, r1
 8001940:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001942:	4b92      	ldr	r3, [pc, #584]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001944:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001946:	4b91      	ldr	r3, [pc, #580]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001948:	2101      	movs	r1, #1
 800194a:	430a      	orrs	r2, r1
 800194c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7ff fb4d 	bl	8000fec <HAL_GetTick>
 8001952:	0003      	movs	r3, r0
 8001954:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001958:	f7ff fb48 	bl	8000fec <HAL_GetTick>
 800195c:	0002      	movs	r2, r0
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e152      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800196a:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800196c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800196e:	2202      	movs	r2, #2
 8001970:	4013      	ands	r3, r2
 8001972:	d0f1      	beq.n	8001958 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001974:	4b85      	ldr	r3, [pc, #532]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001978:	22f8      	movs	r2, #248	; 0xf8
 800197a:	4393      	bics	r3, r2
 800197c:	0019      	movs	r1, r3
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	699b      	ldr	r3, [r3, #24]
 8001982:	00da      	lsls	r2, r3, #3
 8001984:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001986:	430a      	orrs	r2, r1
 8001988:	635a      	str	r2, [r3, #52]	; 0x34
 800198a:	e034      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	695b      	ldr	r3, [r3, #20]
 8001990:	3305      	adds	r3, #5
 8001992:	d111      	bne.n	80019b8 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001994:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001996:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001998:	4b7c      	ldr	r3, [pc, #496]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 800199a:	2104      	movs	r1, #4
 800199c:	438a      	bics	r2, r1
 800199e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019a0:	4b7a      	ldr	r3, [pc, #488]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a4:	22f8      	movs	r2, #248	; 0xf8
 80019a6:	4393      	bics	r3, r2
 80019a8:	0019      	movs	r1, r3
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	699b      	ldr	r3, [r3, #24]
 80019ae:	00da      	lsls	r2, r3, #3
 80019b0:	4b76      	ldr	r3, [pc, #472]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019b2:	430a      	orrs	r2, r1
 80019b4:	635a      	str	r2, [r3, #52]	; 0x34
 80019b6:	e01e      	b.n	80019f6 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80019b8:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019bc:	4b73      	ldr	r3, [pc, #460]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019be:	2104      	movs	r1, #4
 80019c0:	430a      	orrs	r2, r1
 80019c2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80019c4:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019c8:	4b70      	ldr	r3, [pc, #448]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019ca:	2101      	movs	r1, #1
 80019cc:	438a      	bics	r2, r1
 80019ce:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb0c 	bl	8000fec <HAL_GetTick>
 80019d4:	0003      	movs	r3, r0
 80019d6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019d8:	e008      	b.n	80019ec <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019da:	f7ff fb07 	bl	8000fec <HAL_GetTick>
 80019de:	0002      	movs	r2, r0
 80019e0:	69bb      	ldr	r3, [r7, #24]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e111      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80019ec:	4b67      	ldr	r3, [pc, #412]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 80019ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f0:	2202      	movs	r2, #2
 80019f2:	4013      	ands	r3, r2
 80019f4:	d1f1      	bne.n	80019da <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2220      	movs	r2, #32
 80019fc:	4013      	ands	r3, r2
 80019fe:	d05c      	beq.n	8001aba <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	220c      	movs	r2, #12
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b0c      	cmp	r3, #12
 8001a0a:	d00e      	beq.n	8001a2a <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	220c      	movs	r2, #12
 8001a12:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001a14:	2b08      	cmp	r3, #8
 8001a16:	d114      	bne.n	8001a42 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001a18:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a1a:	685a      	ldr	r2, [r3, #4]
 8001a1c:	23c0      	movs	r3, #192	; 0xc0
 8001a1e:	025b      	lsls	r3, r3, #9
 8001a20:	401a      	ands	r2, r3
 8001a22:	23c0      	movs	r3, #192	; 0xc0
 8001a24:	025b      	lsls	r3, r3, #9
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d10b      	bne.n	8001a42 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001a2a:	4b58      	ldr	r3, [pc, #352]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a2e:	2380      	movs	r3, #128	; 0x80
 8001a30:	025b      	lsls	r3, r3, #9
 8001a32:	4013      	ands	r3, r2
 8001a34:	d040      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x5a8>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	2b01      	cmp	r3, #1
 8001a3c:	d03c      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e0e6      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a1b      	ldr	r3, [r3, #32]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d01b      	beq.n	8001a82 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001a4a:	4b50      	ldr	r3, [pc, #320]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a4e:	4b4f      	ldr	r3, [pc, #316]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a50:	2180      	movs	r1, #128	; 0x80
 8001a52:	0249      	lsls	r1, r1, #9
 8001a54:	430a      	orrs	r2, r1
 8001a56:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a58:	f7ff fac8 	bl	8000fec <HAL_GetTick>
 8001a5c:	0003      	movs	r3, r0
 8001a5e:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a62:	f7ff fac3 	bl	8000fec <HAL_GetTick>
 8001a66:	0002      	movs	r2, r0
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e0cd      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a74:	4b45      	ldr	r3, [pc, #276]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a78:	2380      	movs	r3, #128	; 0x80
 8001a7a:	025b      	lsls	r3, r3, #9
 8001a7c:	4013      	ands	r3, r2
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x552>
 8001a80:	e01b      	b.n	8001aba <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001a82:	4b42      	ldr	r3, [pc, #264]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a86:	4b41      	ldr	r3, [pc, #260]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001a88:	4943      	ldr	r1, [pc, #268]	; (8001b98 <HAL_RCC_OscConfig+0x688>)
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a8e:	f7ff faad 	bl	8000fec <HAL_GetTick>
 8001a92:	0003      	movs	r3, r0
 8001a94:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001a96:	e008      	b.n	8001aaa <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a98:	f7ff faa8 	bl	8000fec <HAL_GetTick>
 8001a9c:	0002      	movs	r2, r0
 8001a9e:	69bb      	ldr	r3, [r7, #24]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0b2      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001aaa:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001aac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	025b      	lsls	r3, r3, #9
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d1f0      	bne.n	8001a98 <HAL_RCC_OscConfig+0x588>
 8001ab6:	e000      	b.n	8001aba <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001ab8:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d100      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x5b4>
 8001ac2:	e0a4      	b.n	8001c0e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	220c      	movs	r2, #12
 8001aca:	4013      	ands	r3, r2
 8001acc:	2b08      	cmp	r3, #8
 8001ace:	d100      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x5c2>
 8001ad0:	e078      	b.n	8001bc4 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d14c      	bne.n	8001b74 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	4b2b      	ldr	r3, [pc, #172]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001ae0:	492e      	ldr	r1, [pc, #184]	; (8001b9c <HAL_RCC_OscConfig+0x68c>)
 8001ae2:	400a      	ands	r2, r1
 8001ae4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae6:	f7ff fa81 	bl	8000fec <HAL_GetTick>
 8001aea:	0003      	movs	r3, r0
 8001aec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff fa7c 	bl	8000fec <HAL_GetTick>
 8001af4:	0002      	movs	r2, r0
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e086      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b02:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b04:	681a      	ldr	r2, [r3, #0]
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	049b      	lsls	r3, r3, #18
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d1f0      	bne.n	8001af0 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b0e:	4b1f      	ldr	r3, [pc, #124]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b12:	220f      	movs	r2, #15
 8001b14:	4393      	bics	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001b1c:	4b1b      	ldr	r3, [pc, #108]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	62da      	str	r2, [r3, #44]	; 0x2c
 8001b22:	4b1a      	ldr	r3, [pc, #104]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	4a1e      	ldr	r2, [pc, #120]	; (8001ba0 <HAL_RCC_OscConfig+0x690>)
 8001b28:	4013      	ands	r3, r2
 8001b2a:	0019      	movs	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b34:	431a      	orrs	r2, r3
 8001b36:	4b15      	ldr	r3, [pc, #84]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b3c:	4b13      	ldr	r3, [pc, #76]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b42:	2180      	movs	r1, #128	; 0x80
 8001b44:	0449      	lsls	r1, r1, #17
 8001b46:	430a      	orrs	r2, r1
 8001b48:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b4a:	f7ff fa4f 	bl	8000fec <HAL_GetTick>
 8001b4e:	0003      	movs	r3, r0
 8001b50:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff fa4a 	bl	8000fec <HAL_GetTick>
 8001b58:	0002      	movs	r2, r0
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e054      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b66:	4b09      	ldr	r3, [pc, #36]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	2380      	movs	r3, #128	; 0x80
 8001b6c:	049b      	lsls	r3, r3, #18
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d0f0      	beq.n	8001b54 <HAL_RCC_OscConfig+0x644>
 8001b72:	e04c      	b.n	8001c0e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b74:	4b05      	ldr	r3, [pc, #20]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b04      	ldr	r3, [pc, #16]	; (8001b8c <HAL_RCC_OscConfig+0x67c>)
 8001b7a:	4908      	ldr	r1, [pc, #32]	; (8001b9c <HAL_RCC_OscConfig+0x68c>)
 8001b7c:	400a      	ands	r2, r1
 8001b7e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b80:	f7ff fa34 	bl	8000fec <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0x6a6>
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	efffffff 	.word	0xefffffff
 8001b98:	fffeffff 	.word	0xfffeffff
 8001b9c:	feffffff 	.word	0xfeffffff
 8001ba0:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ba4:	f7ff fa22 	bl	8000fec <HAL_GetTick>
 8001ba8:	0002      	movs	r2, r0
 8001baa:	69bb      	ldr	r3, [r7, #24]
 8001bac:	1ad3      	subs	r3, r2, r3
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d901      	bls.n	8001bb6 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	e02c      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bb6:	4b18      	ldr	r3, [pc, #96]	; (8001c18 <HAL_RCC_OscConfig+0x708>)
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	049b      	lsls	r3, r3, #18
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d1f0      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x694>
 8001bc2:	e024      	b.n	8001c0e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d101      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	e01f      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	; (8001c18 <HAL_RCC_OscConfig+0x708>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001bd6:	4b10      	ldr	r3, [pc, #64]	; (8001c18 <HAL_RCC_OscConfig+0x708>)
 8001bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bda:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bdc:	697a      	ldr	r2, [r7, #20]
 8001bde:	23c0      	movs	r3, #192	; 0xc0
 8001be0:	025b      	lsls	r3, r3, #9
 8001be2:	401a      	ands	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d10e      	bne.n	8001c0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	220f      	movs	r2, #15
 8001bf0:	401a      	ands	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d107      	bne.n	8001c0a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001bfa:	697a      	ldr	r2, [r7, #20]
 8001bfc:	23f0      	movs	r3, #240	; 0xf0
 8001bfe:	039b      	lsls	r3, r3, #14
 8001c00:	401a      	ands	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d001      	beq.n	8001c0e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e000      	b.n	8001c10 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	0018      	movs	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b008      	add	sp, #32
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021000 	.word	0x40021000

08001c1c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b084      	sub	sp, #16
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
 8001c24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d101      	bne.n	8001c30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	e0bf      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001c30:	4b61      	ldr	r3, [pc, #388]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	2201      	movs	r2, #1
 8001c36:	4013      	ands	r3, r2
 8001c38:	683a      	ldr	r2, [r7, #0]
 8001c3a:	429a      	cmp	r2, r3
 8001c3c:	d911      	bls.n	8001c62 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c3e:	4b5e      	ldr	r3, [pc, #376]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2201      	movs	r2, #1
 8001c44:	4393      	bics	r3, r2
 8001c46:	0019      	movs	r1, r3
 8001c48:	4b5b      	ldr	r3, [pc, #364]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001c4a:	683a      	ldr	r2, [r7, #0]
 8001c4c:	430a      	orrs	r2, r1
 8001c4e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c50:	4b59      	ldr	r3, [pc, #356]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	2201      	movs	r2, #1
 8001c56:	4013      	ands	r3, r2
 8001c58:	683a      	ldr	r2, [r7, #0]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d001      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e0a6      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2202      	movs	r2, #2
 8001c68:	4013      	ands	r3, r2
 8001c6a:	d015      	beq.n	8001c98 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	2204      	movs	r2, #4
 8001c72:	4013      	ands	r3, r2
 8001c74:	d006      	beq.n	8001c84 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001c78:	685a      	ldr	r2, [r3, #4]
 8001c7a:	4b50      	ldr	r3, [pc, #320]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001c7c:	21e0      	movs	r1, #224	; 0xe0
 8001c7e:	00c9      	lsls	r1, r1, #3
 8001c80:	430a      	orrs	r2, r1
 8001c82:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c84:	4b4d      	ldr	r3, [pc, #308]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	22f0      	movs	r2, #240	; 0xf0
 8001c8a:	4393      	bics	r3, r2
 8001c8c:	0019      	movs	r1, r3
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	4b4a      	ldr	r3, [pc, #296]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001c94:	430a      	orrs	r2, r1
 8001c96:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2201      	movs	r2, #1
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	d04c      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d107      	bne.n	8001cba <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001caa:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	029b      	lsls	r3, r3, #10
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	d120      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e07a      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d107      	bne.n	8001cd2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cc2:	4b3e      	ldr	r3, [pc, #248]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001cc4:	681a      	ldr	r2, [r3, #0]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	049b      	lsls	r3, r3, #18
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d114      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e06e      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d107      	bne.n	8001cea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001cda:	4b38      	ldr	r3, [pc, #224]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001cdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	025b      	lsls	r3, r3, #9
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d108      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	e062      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cea:	4b34      	ldr	r3, [pc, #208]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	d101      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e05b      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cf8:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001cfa:	685b      	ldr	r3, [r3, #4]
 8001cfc:	2203      	movs	r2, #3
 8001cfe:	4393      	bics	r3, r2
 8001d00:	0019      	movs	r1, r3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685a      	ldr	r2, [r3, #4]
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d0c:	f7ff f96e 	bl	8000fec <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d14:	e009      	b.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d16:	f7ff f969 	bl	8000fec <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	4a27      	ldr	r2, [pc, #156]	; (8001dc0 <HAL_RCC_ClockConfig+0x1a4>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d901      	bls.n	8001d2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001d26:	2303      	movs	r3, #3
 8001d28:	e042      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d2a:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	220c      	movs	r2, #12
 8001d30:	401a      	ands	r2, r3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d1ec      	bne.n	8001d16 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d3c:	4b1e      	ldr	r3, [pc, #120]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	2201      	movs	r2, #1
 8001d42:	4013      	ands	r3, r2
 8001d44:	683a      	ldr	r2, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d211      	bcs.n	8001d6e <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d4a:	4b1b      	ldr	r3, [pc, #108]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2201      	movs	r2, #1
 8001d50:	4393      	bics	r3, r2
 8001d52:	0019      	movs	r1, r3
 8001d54:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	430a      	orrs	r2, r1
 8001d5a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d5c:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <HAL_RCC_ClockConfig+0x19c>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2201      	movs	r2, #1
 8001d62:	4013      	ands	r3, r2
 8001d64:	683a      	ldr	r2, [r7, #0]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e020      	b.n	8001db0 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2204      	movs	r2, #4
 8001d74:	4013      	ands	r3, r2
 8001d76:	d009      	beq.n	8001d8c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001d78:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4a11      	ldr	r2, [pc, #68]	; (8001dc4 <HAL_RCC_ClockConfig+0x1a8>)
 8001d7e:	4013      	ands	r3, r2
 8001d80:	0019      	movs	r1, r3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68da      	ldr	r2, [r3, #12]
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001d88:	430a      	orrs	r2, r1
 8001d8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001d8c:	f000 f820 	bl	8001dd0 <HAL_RCC_GetSysClockFreq>
 8001d90:	0001      	movs	r1, r0
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_RCC_ClockConfig+0x1a0>)
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	091b      	lsrs	r3, r3, #4
 8001d98:	220f      	movs	r2, #15
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	; (8001dc8 <HAL_RCC_ClockConfig+0x1ac>)
 8001d9e:	5cd3      	ldrb	r3, [r2, r3]
 8001da0:	000a      	movs	r2, r1
 8001da2:	40da      	lsrs	r2, r3
 8001da4:	4b09      	ldr	r3, [pc, #36]	; (8001dcc <HAL_RCC_ClockConfig+0x1b0>)
 8001da6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001da8:	2000      	movs	r0, #0
 8001daa:	f7ff f8d9 	bl	8000f60 <HAL_InitTick>
  
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	0018      	movs	r0, r3
 8001db2:	46bd      	mov	sp, r7
 8001db4:	b004      	add	sp, #16
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40022000 	.word	0x40022000
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	00001388 	.word	0x00001388
 8001dc4:	fffff8ff 	.word	0xfffff8ff
 8001dc8:	08002f1c 	.word	0x08002f1c
 8001dcc:	20000000 	.word	0x20000000

08001dd0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001dd0:	b590      	push	{r4, r7, lr}
 8001dd2:	b08f      	sub	sp, #60	; 0x3c
 8001dd4:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001dd6:	2314      	movs	r3, #20
 8001dd8:	18fb      	adds	r3, r7, r3
 8001dda:	4a38      	ldr	r2, [pc, #224]	; (8001ebc <HAL_RCC_GetSysClockFreq+0xec>)
 8001ddc:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dde:	c313      	stmia	r3!, {r0, r1, r4}
 8001de0:	6812      	ldr	r2, [r2, #0]
 8001de2:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	4a36      	ldr	r2, [pc, #216]	; (8001ec0 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001de8:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001dea:	c313      	stmia	r3!, {r0, r1, r4}
 8001dec:	6812      	ldr	r2, [r2, #0]
 8001dee:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001df4:	2300      	movs	r3, #0
 8001df6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001df8:	2300      	movs	r3, #0
 8001dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001e00:	2300      	movs	r3, #0
 8001e02:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001e04:	4b2f      	ldr	r3, [pc, #188]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e0c:	220c      	movs	r2, #12
 8001e0e:	4013      	ands	r3, r2
 8001e10:	2b0c      	cmp	r3, #12
 8001e12:	d047      	beq.n	8001ea4 <HAL_RCC_GetSysClockFreq+0xd4>
 8001e14:	d849      	bhi.n	8001eaa <HAL_RCC_GetSysClockFreq+0xda>
 8001e16:	2b04      	cmp	r3, #4
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_GetSysClockFreq+0x50>
 8001e1a:	2b08      	cmp	r3, #8
 8001e1c:	d003      	beq.n	8001e26 <HAL_RCC_GetSysClockFreq+0x56>
 8001e1e:	e044      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0xda>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001e20:	4b29      	ldr	r3, [pc, #164]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001e24:	e044      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e28:	0c9b      	lsrs	r3, r3, #18
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	2214      	movs	r2, #20
 8001e30:	18ba      	adds	r2, r7, r2
 8001e32:	5cd3      	ldrb	r3, [r2, r3]
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001e36:	4b23      	ldr	r3, [pc, #140]	; (8001ec4 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3a:	220f      	movs	r2, #15
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	1d3a      	adds	r2, r7, #4
 8001e40:	5cd3      	ldrb	r3, [r2, r3]
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e46:	23c0      	movs	r3, #192	; 0xc0
 8001e48:	025b      	lsls	r3, r3, #9
 8001e4a:	401a      	ands	r2, r3
 8001e4c:	2380      	movs	r3, #128	; 0x80
 8001e4e:	025b      	lsls	r3, r3, #9
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d109      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0x98>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e56:	481c      	ldr	r0, [pc, #112]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e58:	f7fe f956 	bl	8000108 <__udivsi3>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	001a      	movs	r2, r3
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	4353      	muls	r3, r2
 8001e64:	637b      	str	r3, [r7, #52]	; 0x34
 8001e66:	e01a      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xce>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6a:	23c0      	movs	r3, #192	; 0xc0
 8001e6c:	025b      	lsls	r3, r3, #9
 8001e6e:	401a      	ands	r2, r3
 8001e70:	23c0      	movs	r3, #192	; 0xc0
 8001e72:	025b      	lsls	r3, r3, #9
 8001e74:	429a      	cmp	r2, r3
 8001e76:	d109      	bne.n	8001e8c <HAL_RCC_GetSysClockFreq+0xbc>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e7a:	4814      	ldr	r0, [pc, #80]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001e7c:	f7fe f944 	bl	8000108 <__udivsi3>
 8001e80:	0003      	movs	r3, r0
 8001e82:	001a      	movs	r2, r3
 8001e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e86:	4353      	muls	r3, r2
 8001e88:	637b      	str	r3, [r7, #52]	; 0x34
 8001e8a:	e008      	b.n	8001e9e <HAL_RCC_GetSysClockFreq+0xce>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e8e:	480e      	ldr	r0, [pc, #56]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001e90:	f7fe f93a 	bl	8000108 <__udivsi3>
 8001e94:	0003      	movs	r3, r0
 8001e96:	001a      	movs	r2, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	4353      	muls	r3, r2
 8001e9c:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea2:	e005      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001ea4:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_RCC_GetSysClockFreq+0xfc>)
 8001ea6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ea8:	e002      	b.n	8001eb0 <HAL_RCC_GetSysClockFreq+0xe0>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001eac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001eae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001eb2:	0018      	movs	r0, r3
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	b00f      	add	sp, #60	; 0x3c
 8001eb8:	bd90      	pop	{r4, r7, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	08002ebc 	.word	0x08002ebc
 8001ec0:	08002ecc 	.word	0x08002ecc
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	007a1200 	.word	0x007a1200
 8001ecc:	02dc6c00 	.word	0x02dc6c00

08001ed0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e042      	b.n	8001f68 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	223d      	movs	r2, #61	; 0x3d
 8001ee6:	5c9b      	ldrb	r3, [r3, r2]
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d107      	bne.n	8001efe <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	223c      	movs	r2, #60	; 0x3c
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	0018      	movs	r0, r3
 8001efa:	f7fe ff13 	bl	8000d24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	223d      	movs	r2, #61	; 0x3d
 8001f02:	2102      	movs	r1, #2
 8001f04:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	3304      	adds	r3, #4
 8001f0e:	0019      	movs	r1, r3
 8001f10:	0010      	movs	r0, r2
 8001f12:	f000 fce1 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2246      	movs	r2, #70	; 0x46
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	223e      	movs	r2, #62	; 0x3e
 8001f22:	2101      	movs	r1, #1
 8001f24:	5499      	strb	r1, [r3, r2]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	5499      	strb	r1, [r3, r2]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2240      	movs	r2, #64	; 0x40
 8001f32:	2101      	movs	r1, #1
 8001f34:	5499      	strb	r1, [r3, r2]
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2241      	movs	r2, #65	; 0x41
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2242      	movs	r2, #66	; 0x42
 8001f42:	2101      	movs	r1, #1
 8001f44:	5499      	strb	r1, [r3, r2]
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2243      	movs	r2, #67	; 0x43
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	5499      	strb	r1, [r3, r2]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2244      	movs	r2, #68	; 0x44
 8001f52:	2101      	movs	r1, #1
 8001f54:	5499      	strb	r1, [r3, r2]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2245      	movs	r2, #69	; 0x45
 8001f5a:	2101      	movs	r1, #1
 8001f5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	223d      	movs	r2, #61	; 0x3d
 8001f62:	2101      	movs	r1, #1
 8001f64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	0018      	movs	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	b002      	add	sp, #8
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d101      	bne.n	8001f82 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	e042      	b.n	8002008 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	223d      	movs	r2, #61	; 0x3d
 8001f86:	5c9b      	ldrb	r3, [r3, r2]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d107      	bne.n	8001f9e <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	223c      	movs	r2, #60	; 0x3c
 8001f92:	2100      	movs	r1, #0
 8001f94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	0018      	movs	r0, r3
 8001f9a:	f000 f839 	bl	8002010 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	223d      	movs	r2, #61	; 0x3d
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3304      	adds	r3, #4
 8001fae:	0019      	movs	r1, r3
 8001fb0:	0010      	movs	r0, r2
 8001fb2:	f000 fc91 	bl	80028d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2246      	movs	r2, #70	; 0x46
 8001fba:	2101      	movs	r1, #1
 8001fbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	223e      	movs	r2, #62	; 0x3e
 8001fc2:	2101      	movs	r1, #1
 8001fc4:	5499      	strb	r1, [r3, r2]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	223f      	movs	r2, #63	; 0x3f
 8001fca:	2101      	movs	r1, #1
 8001fcc:	5499      	strb	r1, [r3, r2]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2240      	movs	r2, #64	; 0x40
 8001fd2:	2101      	movs	r1, #1
 8001fd4:	5499      	strb	r1, [r3, r2]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2241      	movs	r2, #65	; 0x41
 8001fda:	2101      	movs	r1, #1
 8001fdc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2242      	movs	r2, #66	; 0x42
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	5499      	strb	r1, [r3, r2]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2243      	movs	r2, #67	; 0x43
 8001fea:	2101      	movs	r1, #1
 8001fec:	5499      	strb	r1, [r3, r2]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2244      	movs	r2, #68	; 0x44
 8001ff2:	2101      	movs	r1, #1
 8001ff4:	5499      	strb	r1, [r3, r2]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2245      	movs	r2, #69	; 0x45
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	223d      	movs	r2, #61	; 0x3d
 8002002:	2101      	movs	r1, #1
 8002004:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002006:	2300      	movs	r3, #0
}
 8002008:	0018      	movs	r0, r3
 800200a:	46bd      	mov	sp, r7
 800200c:	b002      	add	sp, #8
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	b002      	add	sp, #8
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d104      	bne.n	800203a <HAL_TIM_IC_Start_IT+0x1a>
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	223e      	movs	r2, #62	; 0x3e
 8002034:	5c9b      	ldrb	r3, [r3, r2]
 8002036:	b2db      	uxtb	r3, r3
 8002038:	e013      	b.n	8002062 <HAL_TIM_IC_Start_IT+0x42>
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	2b04      	cmp	r3, #4
 800203e:	d104      	bne.n	800204a <HAL_TIM_IC_Start_IT+0x2a>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	223f      	movs	r2, #63	; 0x3f
 8002044:	5c9b      	ldrb	r3, [r3, r2]
 8002046:	b2db      	uxtb	r3, r3
 8002048:	e00b      	b.n	8002062 <HAL_TIM_IC_Start_IT+0x42>
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	2b08      	cmp	r3, #8
 800204e:	d104      	bne.n	800205a <HAL_TIM_IC_Start_IT+0x3a>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2240      	movs	r2, #64	; 0x40
 8002054:	5c9b      	ldrb	r3, [r3, r2]
 8002056:	b2db      	uxtb	r3, r3
 8002058:	e003      	b.n	8002062 <HAL_TIM_IC_Start_IT+0x42>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2241      	movs	r2, #65	; 0x41
 800205e:	5c9b      	ldrb	r3, [r3, r2]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	220f      	movs	r2, #15
 8002064:	18ba      	adds	r2, r7, r2
 8002066:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d104      	bne.n	8002078 <HAL_TIM_IC_Start_IT+0x58>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2242      	movs	r2, #66	; 0x42
 8002072:	5c9b      	ldrb	r3, [r3, r2]
 8002074:	b2db      	uxtb	r3, r3
 8002076:	e013      	b.n	80020a0 <HAL_TIM_IC_Start_IT+0x80>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d104      	bne.n	8002088 <HAL_TIM_IC_Start_IT+0x68>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2243      	movs	r2, #67	; 0x43
 8002082:	5c9b      	ldrb	r3, [r3, r2]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e00b      	b.n	80020a0 <HAL_TIM_IC_Start_IT+0x80>
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	2b08      	cmp	r3, #8
 800208c:	d104      	bne.n	8002098 <HAL_TIM_IC_Start_IT+0x78>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2244      	movs	r2, #68	; 0x44
 8002092:	5c9b      	ldrb	r3, [r3, r2]
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e003      	b.n	80020a0 <HAL_TIM_IC_Start_IT+0x80>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2245      	movs	r2, #69	; 0x45
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	210e      	movs	r1, #14
 80020a2:	187a      	adds	r2, r7, r1
 80020a4:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80020a6:	230f      	movs	r3, #15
 80020a8:	18fb      	adds	r3, r7, r3
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d103      	bne.n	80020b8 <HAL_TIM_IC_Start_IT+0x98>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80020b0:	187b      	adds	r3, r7, r1
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d001      	beq.n	80020bc <HAL_TIM_IC_Start_IT+0x9c>
  {
    return HAL_ERROR;
 80020b8:	2301      	movs	r3, #1
 80020ba:	e0a1      	b.n	8002200 <HAL_TIM_IC_Start_IT+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d104      	bne.n	80020cc <HAL_TIM_IC_Start_IT+0xac>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	223e      	movs	r2, #62	; 0x3e
 80020c6:	2102      	movs	r1, #2
 80020c8:	5499      	strb	r1, [r3, r2]
 80020ca:	e013      	b.n	80020f4 <HAL_TIM_IC_Start_IT+0xd4>
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	2b04      	cmp	r3, #4
 80020d0:	d104      	bne.n	80020dc <HAL_TIM_IC_Start_IT+0xbc>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	223f      	movs	r2, #63	; 0x3f
 80020d6:	2102      	movs	r1, #2
 80020d8:	5499      	strb	r1, [r3, r2]
 80020da:	e00b      	b.n	80020f4 <HAL_TIM_IC_Start_IT+0xd4>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	2b08      	cmp	r3, #8
 80020e0:	d104      	bne.n	80020ec <HAL_TIM_IC_Start_IT+0xcc>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2240      	movs	r2, #64	; 0x40
 80020e6:	2102      	movs	r1, #2
 80020e8:	5499      	strb	r1, [r3, r2]
 80020ea:	e003      	b.n	80020f4 <HAL_TIM_IC_Start_IT+0xd4>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2241      	movs	r2, #65	; 0x41
 80020f0:	2102      	movs	r1, #2
 80020f2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d104      	bne.n	8002104 <HAL_TIM_IC_Start_IT+0xe4>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2242      	movs	r2, #66	; 0x42
 80020fe:	2102      	movs	r1, #2
 8002100:	5499      	strb	r1, [r3, r2]
 8002102:	e013      	b.n	800212c <HAL_TIM_IC_Start_IT+0x10c>
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	2b04      	cmp	r3, #4
 8002108:	d104      	bne.n	8002114 <HAL_TIM_IC_Start_IT+0xf4>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2243      	movs	r2, #67	; 0x43
 800210e:	2102      	movs	r1, #2
 8002110:	5499      	strb	r1, [r3, r2]
 8002112:	e00b      	b.n	800212c <HAL_TIM_IC_Start_IT+0x10c>
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	2b08      	cmp	r3, #8
 8002118:	d104      	bne.n	8002124 <HAL_TIM_IC_Start_IT+0x104>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2244      	movs	r2, #68	; 0x44
 800211e:	2102      	movs	r1, #2
 8002120:	5499      	strb	r1, [r3, r2]
 8002122:	e003      	b.n	800212c <HAL_TIM_IC_Start_IT+0x10c>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2245      	movs	r2, #69	; 0x45
 8002128:	2102      	movs	r1, #2
 800212a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	2b0c      	cmp	r3, #12
 8002130:	d02a      	beq.n	8002188 <HAL_TIM_IC_Start_IT+0x168>
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b0c      	cmp	r3, #12
 8002136:	d830      	bhi.n	800219a <HAL_TIM_IC_Start_IT+0x17a>
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	2b08      	cmp	r3, #8
 800213c:	d01b      	beq.n	8002176 <HAL_TIM_IC_Start_IT+0x156>
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	2b08      	cmp	r3, #8
 8002142:	d82a      	bhi.n	800219a <HAL_TIM_IC_Start_IT+0x17a>
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IC_Start_IT+0x132>
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	2b04      	cmp	r3, #4
 800214e:	d009      	beq.n	8002164 <HAL_TIM_IC_Start_IT+0x144>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 8002150:	e023      	b.n	800219a <HAL_TIM_IC_Start_IT+0x17a>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	68da      	ldr	r2, [r3, #12]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2102      	movs	r1, #2
 800215e:	430a      	orrs	r2, r1
 8002160:	60da      	str	r2, [r3, #12]
      break;
 8002162:	e01b      	b.n	800219c <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68da      	ldr	r2, [r3, #12]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2104      	movs	r1, #4
 8002170:	430a      	orrs	r2, r1
 8002172:	60da      	str	r2, [r3, #12]
      break;
 8002174:	e012      	b.n	800219c <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2108      	movs	r1, #8
 8002182:	430a      	orrs	r2, r1
 8002184:	60da      	str	r2, [r3, #12]
      break;
 8002186:	e009      	b.n	800219c <HAL_TIM_IC_Start_IT+0x17c>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68da      	ldr	r2, [r3, #12]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2110      	movs	r1, #16
 8002194:	430a      	orrs	r2, r1
 8002196:	60da      	str	r2, [r3, #12]
      break;
 8002198:	e000      	b.n	800219c <HAL_TIM_IC_Start_IT+0x17c>
      break;
 800219a:	46c0      	nop			; (mov r8, r8)
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6839      	ldr	r1, [r7, #0]
 80021a2:	2201      	movs	r2, #1
 80021a4:	0018      	movs	r0, r3
 80021a6:	f000 fdc5 	bl	8002d34 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <HAL_TIM_IC_Start_IT+0x1e8>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d00a      	beq.n	80021ca <HAL_TIM_IC_Start_IT+0x1aa>
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681a      	ldr	r2, [r3, #0]
 80021b8:	2380      	movs	r3, #128	; 0x80
 80021ba:	05db      	lsls	r3, r3, #23
 80021bc:	429a      	cmp	r2, r3
 80021be:	d004      	beq.n	80021ca <HAL_TIM_IC_Start_IT+0x1aa>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a11      	ldr	r2, [pc, #68]	; (800220c <HAL_TIM_IC_Start_IT+0x1ec>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d111      	bne.n	80021ee <HAL_TIM_IC_Start_IT+0x1ce>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2207      	movs	r2, #7
 80021d2:	4013      	ands	r3, r2
 80021d4:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	2b06      	cmp	r3, #6
 80021da:	d010      	beq.n	80021fe <HAL_TIM_IC_Start_IT+0x1de>
    {
      __HAL_TIM_ENABLE(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	681a      	ldr	r2, [r3, #0]
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2101      	movs	r1, #1
 80021e8:	430a      	orrs	r2, r1
 80021ea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80021ec:	e007      	b.n	80021fe <HAL_TIM_IC_Start_IT+0x1de>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2101      	movs	r1, #1
 80021fa:	430a      	orrs	r2, r1
 80021fc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80021fe:	2300      	movs	r3, #0
}
 8002200:	0018      	movs	r0, r3
 8002202:	46bd      	mov	sp, r7
 8002204:	b004      	add	sp, #16
 8002206:	bd80      	pop	{r7, pc}
 8002208:	40012c00 	.word	0x40012c00
 800220c:	40000400 	.word	0x40000400

08002210 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b082      	sub	sp, #8
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	2b0c      	cmp	r3, #12
 800221e:	d02a      	beq.n	8002276 <HAL_TIM_IC_Stop_IT+0x66>
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	2b0c      	cmp	r3, #12
 8002224:	d830      	bhi.n	8002288 <HAL_TIM_IC_Stop_IT+0x78>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d01b      	beq.n	8002264 <HAL_TIM_IC_Stop_IT+0x54>
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	2b08      	cmp	r3, #8
 8002230:	d82a      	bhi.n	8002288 <HAL_TIM_IC_Stop_IT+0x78>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d003      	beq.n	8002240 <HAL_TIM_IC_Stop_IT+0x30>
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d009      	beq.n	8002252 <HAL_TIM_IC_Stop_IT+0x42>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
      break;
    }

    default:
      break;
 800223e:	e023      	b.n	8002288 <HAL_TIM_IC_Stop_IT+0x78>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68da      	ldr	r2, [r3, #12]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2102      	movs	r1, #2
 800224c:	438a      	bics	r2, r1
 800224e:	60da      	str	r2, [r3, #12]
      break;
 8002250:	e01b      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	2104      	movs	r1, #4
 800225e:	438a      	bics	r2, r1
 8002260:	60da      	str	r2, [r3, #12]
      break;
 8002262:	e012      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2108      	movs	r1, #8
 8002270:	438a      	bics	r2, r1
 8002272:	60da      	str	r2, [r3, #12]
      break;
 8002274:	e009      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x7a>
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2110      	movs	r1, #16
 8002282:	438a      	bics	r2, r1
 8002284:	60da      	str	r2, [r3, #12]
      break;
 8002286:	e000      	b.n	800228a <HAL_TIM_IC_Stop_IT+0x7a>
      break;
 8002288:	46c0      	nop			; (mov r8, r8)
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6839      	ldr	r1, [r7, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fd4e 	bl	8002d34 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4a27      	ldr	r2, [pc, #156]	; (800233c <HAL_TIM_IC_Stop_IT+0x12c>)
 80022a0:	4013      	ands	r3, r2
 80022a2:	d10d      	bne.n	80022c0 <HAL_TIM_IC_Stop_IT+0xb0>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a1b      	ldr	r3, [r3, #32]
 80022aa:	4a25      	ldr	r2, [pc, #148]	; (8002340 <HAL_TIM_IC_Stop_IT+0x130>)
 80022ac:	4013      	ands	r3, r2
 80022ae:	d107      	bne.n	80022c0 <HAL_TIM_IC_Stop_IT+0xb0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2101      	movs	r1, #1
 80022bc:	438a      	bics	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d104      	bne.n	80022d0 <HAL_TIM_IC_Stop_IT+0xc0>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	223e      	movs	r2, #62	; 0x3e
 80022ca:	2101      	movs	r1, #1
 80022cc:	5499      	strb	r1, [r3, r2]
 80022ce:	e013      	b.n	80022f8 <HAL_TIM_IC_Stop_IT+0xe8>
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	2b04      	cmp	r3, #4
 80022d4:	d104      	bne.n	80022e0 <HAL_TIM_IC_Stop_IT+0xd0>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	223f      	movs	r2, #63	; 0x3f
 80022da:	2101      	movs	r1, #1
 80022dc:	5499      	strb	r1, [r3, r2]
 80022de:	e00b      	b.n	80022f8 <HAL_TIM_IC_Stop_IT+0xe8>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	2b08      	cmp	r3, #8
 80022e4:	d104      	bne.n	80022f0 <HAL_TIM_IC_Stop_IT+0xe0>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	2240      	movs	r2, #64	; 0x40
 80022ea:	2101      	movs	r1, #1
 80022ec:	5499      	strb	r1, [r3, r2]
 80022ee:	e003      	b.n	80022f8 <HAL_TIM_IC_Stop_IT+0xe8>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2241      	movs	r2, #65	; 0x41
 80022f4:	2101      	movs	r1, #1
 80022f6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <HAL_TIM_IC_Stop_IT+0xf8>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2242      	movs	r2, #66	; 0x42
 8002302:	2101      	movs	r1, #1
 8002304:	5499      	strb	r1, [r3, r2]
 8002306:	e013      	b.n	8002330 <HAL_TIM_IC_Stop_IT+0x120>
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d104      	bne.n	8002318 <HAL_TIM_IC_Stop_IT+0x108>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2243      	movs	r2, #67	; 0x43
 8002312:	2101      	movs	r1, #1
 8002314:	5499      	strb	r1, [r3, r2]
 8002316:	e00b      	b.n	8002330 <HAL_TIM_IC_Stop_IT+0x120>
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	2b08      	cmp	r3, #8
 800231c:	d104      	bne.n	8002328 <HAL_TIM_IC_Stop_IT+0x118>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2244      	movs	r2, #68	; 0x44
 8002322:	2101      	movs	r1, #1
 8002324:	5499      	strb	r1, [r3, r2]
 8002326:	e003      	b.n	8002330 <HAL_TIM_IC_Stop_IT+0x120>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2245      	movs	r2, #69	; 0x45
 800232c:	2101      	movs	r1, #1
 800232e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	0018      	movs	r0, r3
 8002334:	46bd      	mov	sp, r7
 8002336:	b002      	add	sp, #8
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	00001111 	.word	0x00001111
 8002340:	00000444 	.word	0x00000444

08002344 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b082      	sub	sp, #8
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d124      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	2b02      	cmp	r3, #2
 8002366:	d11d      	bne.n	80023a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2203      	movs	r2, #3
 800236e:	4252      	negs	r2, r2
 8002370:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	2203      	movs	r2, #3
 8002380:	4013      	ands	r3, r2
 8002382:	d004      	beq.n	800238e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	0018      	movs	r0, r3
 8002388:	f7fe fc70 	bl	8000c6c <HAL_TIM_IC_CaptureCallback>
 800238c:	e007      	b.n	800239e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	0018      	movs	r0, r3
 8002392:	f000 fa89 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 fa8d 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2200      	movs	r2, #0
 80023a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691b      	ldr	r3, [r3, #16]
 80023aa:	2204      	movs	r2, #4
 80023ac:	4013      	ands	r3, r2
 80023ae:	2b04      	cmp	r3, #4
 80023b0:	d125      	bne.n	80023fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	2204      	movs	r2, #4
 80023ba:	4013      	ands	r3, r2
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d11e      	bne.n	80023fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2205      	movs	r2, #5
 80023c6:	4252      	negs	r2, r2
 80023c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	23c0      	movs	r3, #192	; 0xc0
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4013      	ands	r3, r2
 80023dc:	d004      	beq.n	80023e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	0018      	movs	r0, r3
 80023e2:	f7fe fc43 	bl	8000c6c <HAL_TIM_IC_CaptureCallback>
 80023e6:	e007      	b.n	80023f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	0018      	movs	r0, r3
 80023ec:	f000 fa5c 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	0018      	movs	r0, r3
 80023f4:	f000 fa60 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2200      	movs	r2, #0
 80023fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	691b      	ldr	r3, [r3, #16]
 8002404:	2208      	movs	r2, #8
 8002406:	4013      	ands	r3, r2
 8002408:	2b08      	cmp	r3, #8
 800240a:	d124      	bne.n	8002456 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	2208      	movs	r2, #8
 8002414:	4013      	ands	r3, r2
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11d      	bne.n	8002456 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	2209      	movs	r2, #9
 8002420:	4252      	negs	r2, r2
 8002422:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2204      	movs	r2, #4
 8002428:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	69db      	ldr	r3, [r3, #28]
 8002430:	2203      	movs	r2, #3
 8002432:	4013      	ands	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	0018      	movs	r0, r3
 800243a:	f7fe fc17 	bl	8000c6c <HAL_TIM_IC_CaptureCallback>
 800243e:	e007      	b.n	8002450 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fa30 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	0018      	movs	r0, r3
 800244c:	f000 fa34 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691b      	ldr	r3, [r3, #16]
 800245c:	2210      	movs	r2, #16
 800245e:	4013      	ands	r3, r2
 8002460:	2b10      	cmp	r3, #16
 8002462:	d125      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	68db      	ldr	r3, [r3, #12]
 800246a:	2210      	movs	r2, #16
 800246c:	4013      	ands	r3, r2
 800246e:	2b10      	cmp	r3, #16
 8002470:	d11e      	bne.n	80024b0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2211      	movs	r2, #17
 8002478:	4252      	negs	r2, r2
 800247a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2208      	movs	r2, #8
 8002480:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	69da      	ldr	r2, [r3, #28]
 8002488:	23c0      	movs	r3, #192	; 0xc0
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	4013      	ands	r3, r2
 800248e:	d004      	beq.n	800249a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f7fe fbea 	bl	8000c6c <HAL_TIM_IC_CaptureCallback>
 8002498:	e007      	b.n	80024aa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	0018      	movs	r0, r3
 800249e:	f000 fa03 	bl	80028a8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	0018      	movs	r0, r3
 80024a6:	f000 fa07 	bl	80028b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2200      	movs	r2, #0
 80024ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	2201      	movs	r2, #1
 80024b8:	4013      	ands	r3, r2
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d10f      	bne.n	80024de <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d108      	bne.n	80024de <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2202      	movs	r2, #2
 80024d2:	4252      	negs	r2, r2
 80024d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	0018      	movs	r0, r3
 80024da:	f000 f9dd 	bl	8002898 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	2280      	movs	r2, #128	; 0x80
 80024e6:	4013      	ands	r3, r2
 80024e8:	2b80      	cmp	r3, #128	; 0x80
 80024ea:	d10f      	bne.n	800250c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2280      	movs	r2, #128	; 0x80
 80024f4:	4013      	ands	r3, r2
 80024f6:	2b80      	cmp	r3, #128	; 0x80
 80024f8:	d108      	bne.n	800250c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	2281      	movs	r2, #129	; 0x81
 8002500:	4252      	negs	r2, r2
 8002502:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	0018      	movs	r0, r3
 8002508:	f000 fc98 	bl	8002e3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	2240      	movs	r2, #64	; 0x40
 8002514:	4013      	ands	r3, r2
 8002516:	2b40      	cmp	r3, #64	; 0x40
 8002518:	d10f      	bne.n	800253a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	2240      	movs	r2, #64	; 0x40
 8002522:	4013      	ands	r3, r2
 8002524:	2b40      	cmp	r3, #64	; 0x40
 8002526:	d108      	bne.n	800253a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2241      	movs	r2, #65	; 0x41
 800252e:	4252      	negs	r2, r2
 8002530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	0018      	movs	r0, r3
 8002536:	f000 f9c7 	bl	80028c8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	691b      	ldr	r3, [r3, #16]
 8002540:	2220      	movs	r2, #32
 8002542:	4013      	ands	r3, r2
 8002544:	2b20      	cmp	r3, #32
 8002546:	d10f      	bne.n	8002568 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68db      	ldr	r3, [r3, #12]
 800254e:	2220      	movs	r2, #32
 8002550:	4013      	ands	r3, r2
 8002552:	2b20      	cmp	r3, #32
 8002554:	d108      	bne.n	8002568 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	2221      	movs	r2, #33	; 0x21
 800255c:	4252      	negs	r2, r2
 800255e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	0018      	movs	r0, r3
 8002564:	f000 fc62 	bl	8002e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b084      	sub	sp, #16
 8002574:	af00      	add	r7, sp, #0
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	60b9      	str	r1, [r7, #8]
 800257a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	223c      	movs	r2, #60	; 0x3c
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002586:	2302      	movs	r3, #2
 8002588:	e082      	b.n	8002690 <HAL_TIM_IC_ConfigChannel+0x120>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	223c      	movs	r2, #60	; 0x3c
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d11b      	bne.n	80025d0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	6819      	ldr	r1, [r3, #0]
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f000 fa0c 	bl	80029c4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699a      	ldr	r2, [r3, #24]
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	210c      	movs	r1, #12
 80025b8:	438a      	bics	r2, r1
 80025ba:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6999      	ldr	r1, [r3, #24]
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	619a      	str	r2, [r3, #24]
 80025ce:	e05a      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b04      	cmp	r3, #4
 80025d4:	d11c      	bne.n	8002610 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	6818      	ldr	r0, [r3, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	6819      	ldr	r1, [r3, #0]
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	68db      	ldr	r3, [r3, #12]
 80025e6:	f000 fa71 	bl	8002acc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	699a      	ldr	r2, [r3, #24]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4928      	ldr	r1, [pc, #160]	; (8002698 <HAL_TIM_IC_ConfigChannel+0x128>)
 80025f6:	400a      	ands	r2, r1
 80025f8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6999      	ldr	r1, [r3, #24]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	021a      	lsls	r2, r3, #8
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	619a      	str	r2, [r3, #24]
 800260e:	e03a      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b08      	cmp	r3, #8
 8002614:	d11b      	bne.n	800264e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	6818      	ldr	r0, [r3, #0]
 800261a:	68bb      	ldr	r3, [r7, #8]
 800261c:	6819      	ldr	r1, [r3, #0]
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	685a      	ldr	r2, [r3, #4]
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	f000 fac5 	bl	8002bb4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	69da      	ldr	r2, [r3, #28]
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	210c      	movs	r1, #12
 8002636:	438a      	bics	r2, r1
 8002638:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	69d9      	ldr	r1, [r3, #28]
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	430a      	orrs	r2, r1
 800264a:	61da      	str	r2, [r3, #28]
 800264c:	e01b      	b.n	8002686 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6818      	ldr	r0, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6819      	ldr	r1, [r3, #0]
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	685a      	ldr	r2, [r3, #4]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	f000 fae9 	bl	8002c34 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	69da      	ldr	r2, [r3, #28]
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	490a      	ldr	r1, [pc, #40]	; (8002698 <HAL_TIM_IC_ConfigChannel+0x128>)
 800266e:	400a      	ands	r2, r1
 8002670:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	69d9      	ldr	r1, [r3, #28]
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	021a      	lsls	r2, r3, #8
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	430a      	orrs	r2, r1
 8002684:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	223c      	movs	r2, #60	; 0x3c
 800268a:	2100      	movs	r1, #0
 800268c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800268e:	2300      	movs	r3, #0
}
 8002690:	0018      	movs	r0, r3
 8002692:	46bd      	mov	sp, r7
 8002694:	b004      	add	sp, #16
 8002696:	bd80      	pop	{r7, pc}
 8002698:	fffff3ff 	.word	0xfffff3ff

0800269c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
 80026a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	223c      	movs	r2, #60	; 0x3c
 80026aa:	5c9b      	ldrb	r3, [r3, r2]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d101      	bne.n	80026b4 <HAL_TIM_ConfigClockSource+0x18>
 80026b0:	2302      	movs	r3, #2
 80026b2:	e0b7      	b.n	8002824 <HAL_TIM_ConfigClockSource+0x188>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	223c      	movs	r2, #60	; 0x3c
 80026b8:	2101      	movs	r1, #1
 80026ba:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	223d      	movs	r2, #61	; 0x3d
 80026c0:	2102      	movs	r1, #2
 80026c2:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	2277      	movs	r2, #119	; 0x77
 80026d0:	4393      	bics	r3, r2
 80026d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	4a55      	ldr	r2, [pc, #340]	; (800282c <HAL_TIM_ConfigClockSource+0x190>)
 80026d8:	4013      	ands	r3, r2
 80026da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	68fa      	ldr	r2, [r7, #12]
 80026e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	2280      	movs	r2, #128	; 0x80
 80026ea:	0192      	lsls	r2, r2, #6
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d040      	beq.n	8002772 <HAL_TIM_ConfigClockSource+0xd6>
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	0192      	lsls	r2, r2, #6
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d900      	bls.n	80026fa <HAL_TIM_ConfigClockSource+0x5e>
 80026f8:	e088      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 80026fa:	2280      	movs	r2, #128	; 0x80
 80026fc:	0152      	lsls	r2, r2, #5
 80026fe:	4293      	cmp	r3, r2
 8002700:	d100      	bne.n	8002704 <HAL_TIM_ConfigClockSource+0x68>
 8002702:	e085      	b.n	8002810 <HAL_TIM_ConfigClockSource+0x174>
 8002704:	2280      	movs	r2, #128	; 0x80
 8002706:	0152      	lsls	r2, r2, #5
 8002708:	4293      	cmp	r3, r2
 800270a:	d900      	bls.n	800270e <HAL_TIM_ConfigClockSource+0x72>
 800270c:	e07e      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 800270e:	2b70      	cmp	r3, #112	; 0x70
 8002710:	d018      	beq.n	8002744 <HAL_TIM_ConfigClockSource+0xa8>
 8002712:	d900      	bls.n	8002716 <HAL_TIM_ConfigClockSource+0x7a>
 8002714:	e07a      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 8002716:	2b60      	cmp	r3, #96	; 0x60
 8002718:	d04f      	beq.n	80027ba <HAL_TIM_ConfigClockSource+0x11e>
 800271a:	d900      	bls.n	800271e <HAL_TIM_ConfigClockSource+0x82>
 800271c:	e076      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 800271e:	2b50      	cmp	r3, #80	; 0x50
 8002720:	d03b      	beq.n	800279a <HAL_TIM_ConfigClockSource+0xfe>
 8002722:	d900      	bls.n	8002726 <HAL_TIM_ConfigClockSource+0x8a>
 8002724:	e072      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 8002726:	2b40      	cmp	r3, #64	; 0x40
 8002728:	d057      	beq.n	80027da <HAL_TIM_ConfigClockSource+0x13e>
 800272a:	d900      	bls.n	800272e <HAL_TIM_ConfigClockSource+0x92>
 800272c:	e06e      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 800272e:	2b30      	cmp	r3, #48	; 0x30
 8002730:	d063      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15e>
 8002732:	d86b      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 8002734:	2b20      	cmp	r3, #32
 8002736:	d060      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15e>
 8002738:	d868      	bhi.n	800280c <HAL_TIM_ConfigClockSource+0x170>
 800273a:	2b00      	cmp	r3, #0
 800273c:	d05d      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15e>
 800273e:	2b10      	cmp	r3, #16
 8002740:	d05b      	beq.n	80027fa <HAL_TIM_ConfigClockSource+0x15e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002742:	e063      	b.n	800280c <HAL_TIM_ConfigClockSource+0x170>
      TIM_ETR_SetConfig(htim->Instance,
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	6899      	ldr	r1, [r3, #8]
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	68db      	ldr	r3, [r3, #12]
 8002754:	f000 face 	bl	8002cf4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	2277      	movs	r2, #119	; 0x77
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	609a      	str	r2, [r3, #8]
      break;
 8002770:	e04f      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      TIM_ETR_SetConfig(htim->Instance,
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6899      	ldr	r1, [r3, #8]
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685a      	ldr	r2, [r3, #4]
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	f000 fab7 	bl	8002cf4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2180      	movs	r1, #128	; 0x80
 8002792:	01c9      	lsls	r1, r1, #7
 8002794:	430a      	orrs	r2, r1
 8002796:	609a      	str	r2, [r3, #8]
      break;
 8002798:	e03b      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6818      	ldr	r0, [r3, #0]
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	6859      	ldr	r1, [r3, #4]
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	001a      	movs	r2, r3
 80027a8:	f000 f962 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2150      	movs	r1, #80	; 0x50
 80027b2:	0018      	movs	r0, r3
 80027b4:	f000 fa84 	bl	8002cc0 <TIM_ITRx_SetConfig>
      break;
 80027b8:	e02b      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6818      	ldr	r0, [r3, #0]
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	001a      	movs	r2, r3
 80027c8:	f000 f9c2 	bl	8002b50 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	2160      	movs	r1, #96	; 0x60
 80027d2:	0018      	movs	r0, r3
 80027d4:	f000 fa74 	bl	8002cc0 <TIM_ITRx_SetConfig>
      break;
 80027d8:	e01b      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6818      	ldr	r0, [r3, #0]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	6859      	ldr	r1, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	001a      	movs	r2, r3
 80027e8:	f000 f942 	bl	8002a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2140      	movs	r1, #64	; 0x40
 80027f2:	0018      	movs	r0, r3
 80027f4:	f000 fa64 	bl	8002cc0 <TIM_ITRx_SetConfig>
      break;
 80027f8:	e00b      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	0019      	movs	r1, r3
 8002804:	0010      	movs	r0, r2
 8002806:	f000 fa5b 	bl	8002cc0 <TIM_ITRx_SetConfig>
        break;
 800280a:	e002      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      break;
 800280c:	46c0      	nop			; (mov r8, r8)
 800280e:	e000      	b.n	8002812 <HAL_TIM_ConfigClockSource+0x176>
      break;
 8002810:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	223d      	movs	r2, #61	; 0x3d
 8002816:	2101      	movs	r1, #1
 8002818:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	223c      	movs	r2, #60	; 0x3c
 800281e:	2100      	movs	r1, #0
 8002820:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002822:	2300      	movs	r3, #0
}
 8002824:	0018      	movs	r0, r3
 8002826:	46bd      	mov	sp, r7
 8002828:	b004      	add	sp, #16
 800282a:	bd80      	pop	{r7, pc}
 800282c:	ffff00ff 	.word	0xffff00ff

08002830 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	2b0c      	cmp	r3, #12
 8002842:	d01e      	beq.n	8002882 <HAL_TIM_ReadCapturedValue+0x52>
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	2b0c      	cmp	r3, #12
 8002848:	d820      	bhi.n	800288c <HAL_TIM_ReadCapturedValue+0x5c>
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b08      	cmp	r3, #8
 800284e:	d013      	beq.n	8002878 <HAL_TIM_ReadCapturedValue+0x48>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b08      	cmp	r3, #8
 8002854:	d81a      	bhi.n	800288c <HAL_TIM_ReadCapturedValue+0x5c>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <HAL_TIM_ReadCapturedValue+0x34>
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b04      	cmp	r3, #4
 8002860:	d005      	beq.n	800286e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002862:	e013      	b.n	800288c <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286a:	60fb      	str	r3, [r7, #12]
      break;
 800286c:	e00f      	b.n	800288e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002874:	60fb      	str	r3, [r7, #12]
      break;
 8002876:	e00a      	b.n	800288e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287e:	60fb      	str	r3, [r7, #12]
      break;
 8002880:	e005      	b.n	800288e <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	60fb      	str	r3, [r7, #12]
      break;
 800288a:	e000      	b.n	800288e <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 800288c:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 800288e:	68fb      	ldr	r3, [r7, #12]
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}

08002898 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b082      	sub	sp, #8
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80028a0:	46c0      	nop			; (mov r8, r8)
 80028a2:	46bd      	mov	sp, r7
 80028a4:	b002      	add	sp, #8
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028b0:	46c0      	nop			; (mov r8, r8)
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b002      	add	sp, #8
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c0:	46c0      	nop			; (mov r8, r8)
 80028c2:	46bd      	mov	sp, r7
 80028c4:	b002      	add	sp, #8
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028d0:	46c0      	nop			; (mov r8, r8)
 80028d2:	46bd      	mov	sp, r7
 80028d4:	b002      	add	sp, #8
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
 80028e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a30      	ldr	r2, [pc, #192]	; (80029ac <TIM_Base_SetConfig+0xd4>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d008      	beq.n	8002902 <TIM_Base_SetConfig+0x2a>
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	05db      	lsls	r3, r3, #23
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d003      	beq.n	8002902 <TIM_Base_SetConfig+0x2a>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a2c      	ldr	r2, [pc, #176]	; (80029b0 <TIM_Base_SetConfig+0xd8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d108      	bne.n	8002914 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2270      	movs	r2, #112	; 0x70
 8002906:	4393      	bics	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	68fa      	ldr	r2, [r7, #12]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	4a25      	ldr	r2, [pc, #148]	; (80029ac <TIM_Base_SetConfig+0xd4>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d014      	beq.n	8002946 <TIM_Base_SetConfig+0x6e>
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	05db      	lsls	r3, r3, #23
 8002922:	429a      	cmp	r2, r3
 8002924:	d00f      	beq.n	8002946 <TIM_Base_SetConfig+0x6e>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a21      	ldr	r2, [pc, #132]	; (80029b0 <TIM_Base_SetConfig+0xd8>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00b      	beq.n	8002946 <TIM_Base_SetConfig+0x6e>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a20      	ldr	r2, [pc, #128]	; (80029b4 <TIM_Base_SetConfig+0xdc>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <TIM_Base_SetConfig+0x6e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1f      	ldr	r2, [pc, #124]	; (80029b8 <TIM_Base_SetConfig+0xe0>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d003      	beq.n	8002946 <TIM_Base_SetConfig+0x6e>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4a1e      	ldr	r2, [pc, #120]	; (80029bc <TIM_Base_SetConfig+0xe4>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d108      	bne.n	8002958 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4a1d      	ldr	r2, [pc, #116]	; (80029c0 <TIM_Base_SetConfig+0xe8>)
 800294a:	4013      	ands	r3, r2
 800294c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	2280      	movs	r2, #128	; 0x80
 800295c:	4393      	bics	r3, r2
 800295e:	001a      	movs	r2, r3
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	695b      	ldr	r3, [r3, #20]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689a      	ldr	r2, [r3, #8]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a0a      	ldr	r2, [pc, #40]	; (80029ac <TIM_Base_SetConfig+0xd4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d007      	beq.n	8002996 <TIM_Base_SetConfig+0xbe>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a0b      	ldr	r2, [pc, #44]	; (80029b8 <TIM_Base_SetConfig+0xe0>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d003      	beq.n	8002996 <TIM_Base_SetConfig+0xbe>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a0a      	ldr	r2, [pc, #40]	; (80029bc <TIM_Base_SetConfig+0xe4>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d103      	bne.n	800299e <TIM_Base_SetConfig+0xc6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	691a      	ldr	r2, [r3, #16]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2201      	movs	r2, #1
 80029a2:	615a      	str	r2, [r3, #20]
}
 80029a4:	46c0      	nop			; (mov r8, r8)
 80029a6:	46bd      	mov	sp, r7
 80029a8:	b004      	add	sp, #16
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40012c00 	.word	0x40012c00
 80029b0:	40000400 	.word	0x40000400
 80029b4:	40002000 	.word	0x40002000
 80029b8:	40014400 	.word	0x40014400
 80029bc:	40014800 	.word	0x40014800
 80029c0:	fffffcff 	.word	0xfffffcff

080029c4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	2201      	movs	r2, #1
 80029d8:	4393      	bics	r3, r2
 80029da:	001a      	movs	r2, r3
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a1e      	ldr	r2, [pc, #120]	; (8002a68 <TIM_TI1_SetConfig+0xa4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d008      	beq.n	8002a06 <TIM_TI1_SetConfig+0x42>
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	2380      	movs	r3, #128	; 0x80
 80029f8:	05db      	lsls	r3, r3, #23
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d003      	beq.n	8002a06 <TIM_TI1_SetConfig+0x42>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a1a      	ldr	r2, [pc, #104]	; (8002a6c <TIM_TI1_SetConfig+0xa8>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d101      	bne.n	8002a0a <TIM_TI1_SetConfig+0x46>
 8002a06:	2301      	movs	r3, #1
 8002a08:	e000      	b.n	8002a0c <TIM_TI1_SetConfig+0x48>
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <TIM_TI1_SetConfig+0x5e>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	2203      	movs	r2, #3
 8002a14:	4393      	bics	r3, r2
 8002a16:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a18:	697a      	ldr	r2, [r7, #20]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	617b      	str	r3, [r7, #20]
 8002a20:	e003      	b.n	8002a2a <TIM_TI1_SetConfig+0x66>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	2201      	movs	r2, #1
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	22f0      	movs	r2, #240	; 0xf0
 8002a2e:	4393      	bics	r3, r2
 8002a30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	011b      	lsls	r3, r3, #4
 8002a36:	22ff      	movs	r2, #255	; 0xff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	220a      	movs	r2, #10
 8002a44:	4393      	bics	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	220a      	movs	r2, #10
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	697a      	ldr	r2, [r7, #20]
 8002a58:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	693a      	ldr	r2, [r7, #16]
 8002a5e:	621a      	str	r2, [r3, #32]
}
 8002a60:	46c0      	nop			; (mov r8, r8)
 8002a62:	46bd      	mov	sp, r7
 8002a64:	b006      	add	sp, #24
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40012c00 	.word	0x40012c00
 8002a6c:	40000400 	.word	0x40000400

08002a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b086      	sub	sp, #24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6a1b      	ldr	r3, [r3, #32]
 8002a86:	2201      	movs	r2, #1
 8002a88:	4393      	bics	r3, r2
 8002a8a:	001a      	movs	r2, r3
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	699b      	ldr	r3, [r3, #24]
 8002a94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	22f0      	movs	r2, #240	; 0xf0
 8002a9a:	4393      	bics	r3, r2
 8002a9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	011b      	lsls	r3, r3, #4
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	220a      	movs	r2, #10
 8002aac:	4393      	bics	r3, r2
 8002aae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	693a      	ldr	r2, [r7, #16]
 8002abc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	697a      	ldr	r2, [r7, #20]
 8002ac2:	621a      	str	r2, [r3, #32]
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b006      	add	sp, #24
 8002aca:	bd80      	pop	{r7, pc}

08002acc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	6a1b      	ldr	r3, [r3, #32]
 8002ade:	2210      	movs	r2, #16
 8002ae0:	4393      	bics	r3, r2
 8002ae2:	001a      	movs	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	6a1b      	ldr	r3, [r3, #32]
 8002af2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	4a14      	ldr	r2, [pc, #80]	; (8002b48 <TIM_TI2_SetConfig+0x7c>)
 8002af8:	4013      	ands	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	021b      	lsls	r3, r3, #8
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4a10      	ldr	r2, [pc, #64]	; (8002b4c <TIM_TI2_SetConfig+0x80>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	031b      	lsls	r3, r3, #12
 8002b12:	041b      	lsls	r3, r3, #16
 8002b14:	0c1b      	lsrs	r3, r3, #16
 8002b16:	697a      	ldr	r2, [r7, #20]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	22a0      	movs	r2, #160	; 0xa0
 8002b20:	4393      	bics	r3, r2
 8002b22:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	011b      	lsls	r3, r3, #4
 8002b28:	22a0      	movs	r2, #160	; 0xa0
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	693a      	ldr	r2, [r7, #16]
 8002b3c:	621a      	str	r2, [r3, #32]
}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b006      	add	sp, #24
 8002b44:	bd80      	pop	{r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	fffffcff 	.word	0xfffffcff
 8002b4c:	ffff0fff 	.word	0xffff0fff

08002b50 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b086      	sub	sp, #24
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	60f8      	str	r0, [r7, #12]
 8002b58:	60b9      	str	r1, [r7, #8]
 8002b5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	6a1b      	ldr	r3, [r3, #32]
 8002b60:	2210      	movs	r2, #16
 8002b62:	4393      	bics	r3, r2
 8002b64:	001a      	movs	r2, r3
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	699b      	ldr	r3, [r3, #24]
 8002b6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <TIM_TI2_ConfigInputStage+0x60>)
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	697a      	ldr	r2, [r7, #20]
 8002b84:	4313      	orrs	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	22a0      	movs	r2, #160	; 0xa0
 8002b8c:	4393      	bics	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	693a      	ldr	r2, [r7, #16]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	621a      	str	r2, [r3, #32]
}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	b006      	add	sp, #24
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	46c0      	nop			; (mov r8, r8)
 8002bb0:	ffff0fff 	.word	0xffff0fff

08002bb4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	4a19      	ldr	r2, [pc, #100]	; (8002c2c <TIM_TI3_SetConfig+0x78>)
 8002bc8:	401a      	ands	r2, r3
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	69db      	ldr	r3, [r3, #28]
 8002bd2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1b      	ldr	r3, [r3, #32]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	2203      	movs	r2, #3
 8002bde:	4393      	bics	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002be2:	697a      	ldr	r2, [r7, #20]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4313      	orrs	r3, r2
 8002be8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bea:	697b      	ldr	r3, [r7, #20]
 8002bec:	22f0      	movs	r2, #240	; 0xf0
 8002bee:	4393      	bics	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	011b      	lsls	r3, r3, #4
 8002bf6:	22ff      	movs	r2, #255	; 0xff
 8002bf8:	4013      	ands	r3, r2
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	4313      	orrs	r3, r2
 8002bfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4a0b      	ldr	r2, [pc, #44]	; (8002c30 <TIM_TI3_SetConfig+0x7c>)
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	021a      	lsls	r2, r3, #8
 8002c0c:	23a0      	movs	r3, #160	; 0xa0
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	4013      	ands	r3, r2
 8002c12:	693a      	ldr	r2, [r7, #16]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	621a      	str	r2, [r3, #32]
}
 8002c24:	46c0      	nop			; (mov r8, r8)
 8002c26:	46bd      	mov	sp, r7
 8002c28:	b006      	add	sp, #24
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	fffffeff 	.word	0xfffffeff
 8002c30:	fffff5ff 	.word	0xfffff5ff

08002c34 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
 8002c40:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a1b      	ldr	r3, [r3, #32]
 8002c46:	4a1a      	ldr	r2, [pc, #104]	; (8002cb0 <TIM_TI4_SetConfig+0x7c>)
 8002c48:	401a      	ands	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	69db      	ldr	r3, [r3, #28]
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a15      	ldr	r2, [pc, #84]	; (8002cb4 <TIM_TI4_SetConfig+0x80>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	021b      	lsls	r3, r3, #8
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <TIM_TI4_SetConfig+0x84>)
 8002c70:	4013      	ands	r3, r2
 8002c72:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	031b      	lsls	r3, r3, #12
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	0c1b      	lsrs	r3, r3, #16
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4a0d      	ldr	r2, [pc, #52]	; (8002cbc <TIM_TI4_SetConfig+0x88>)
 8002c86:	4013      	ands	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	031a      	lsls	r2, r3, #12
 8002c8e:	23a0      	movs	r3, #160	; 0xa0
 8002c90:	021b      	lsls	r3, r3, #8
 8002c92:	4013      	ands	r3, r2
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	621a      	str	r2, [r3, #32]
}
 8002ca6:	46c0      	nop			; (mov r8, r8)
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	b006      	add	sp, #24
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	46c0      	nop			; (mov r8, r8)
 8002cb0:	ffffefff 	.word	0xffffefff
 8002cb4:	fffffcff 	.word	0xfffffcff
 8002cb8:	ffff0fff 	.word	0xffff0fff
 8002cbc:	ffff5fff 	.word	0xffff5fff

08002cc0 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	2270      	movs	r2, #112	; 0x70
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	2207      	movs	r2, #7
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68fa      	ldr	r2, [r7, #12]
 8002ce8:	609a      	str	r2, [r3, #8]
}
 8002cea:	46c0      	nop			; (mov r8, r8)
 8002cec:	46bd      	mov	sp, r7
 8002cee:	b004      	add	sp, #16
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
 8002d00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	4a09      	ldr	r2, [pc, #36]	; (8002d30 <TIM_ETR_SetConfig+0x3c>)
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	021a      	lsls	r2, r3, #8
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	431a      	orrs	r2, r3
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	697a      	ldr	r2, [r7, #20]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	609a      	str	r2, [r3, #8]
}
 8002d28:	46c0      	nop			; (mov r8, r8)
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	b006      	add	sp, #24
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	ffff00ff 	.word	0xffff00ff

08002d34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b086      	sub	sp, #24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	60b9      	str	r1, [r7, #8]
 8002d3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d40:	68bb      	ldr	r3, [r7, #8]
 8002d42:	221f      	movs	r2, #31
 8002d44:	4013      	ands	r3, r2
 8002d46:	2201      	movs	r2, #1
 8002d48:	409a      	lsls	r2, r3
 8002d4a:	0013      	movs	r3, r2
 8002d4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	43d2      	mvns	r2, r2
 8002d56:	401a      	ands	r2, r3
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6a1a      	ldr	r2, [r3, #32]
 8002d60:	68bb      	ldr	r3, [r7, #8]
 8002d62:	211f      	movs	r1, #31
 8002d64:	400b      	ands	r3, r1
 8002d66:	6879      	ldr	r1, [r7, #4]
 8002d68:	4099      	lsls	r1, r3
 8002d6a:	000b      	movs	r3, r1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	621a      	str	r2, [r3, #32]
}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	46bd      	mov	sp, r7
 8002d76:	b006      	add	sp, #24
 8002d78:	bd80      	pop	{r7, pc}
	...

08002d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	223c      	movs	r2, #60	; 0x3c
 8002d8a:	5c9b      	ldrb	r3, [r3, r2]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d101      	bne.n	8002d94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d90:	2302      	movs	r3, #2
 8002d92:	e042      	b.n	8002e1a <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	223c      	movs	r2, #60	; 0x3c
 8002d98:	2101      	movs	r1, #1
 8002d9a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	223d      	movs	r2, #61	; 0x3d
 8002da0:	2102      	movs	r1, #2
 8002da2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2270      	movs	r2, #112	; 0x70
 8002db8:	4393      	bics	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	68fa      	ldr	r2, [r7, #12]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68fa      	ldr	r2, [r7, #12]
 8002dcc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a14      	ldr	r2, [pc, #80]	; (8002e24 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d00a      	beq.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	2380      	movs	r3, #128	; 0x80
 8002dde:	05db      	lsls	r3, r3, #23
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d004      	beq.n	8002dee <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a0f      	ldr	r2, [pc, #60]	; (8002e28 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d10c      	bne.n	8002e08 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dee:	68bb      	ldr	r3, [r7, #8]
 8002df0:	2280      	movs	r2, #128	; 0x80
 8002df2:	4393      	bics	r3, r2
 8002df4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	68ba      	ldr	r2, [r7, #8]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	223d      	movs	r2, #61	; 0x3d
 8002e0c:	2101      	movs	r1, #1
 8002e0e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	223c      	movs	r2, #60	; 0x3c
 8002e14:	2100      	movs	r1, #0
 8002e16:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b004      	add	sp, #16
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	40012c00 	.word	0x40012c00
 8002e28:	40000400 	.word	0x40000400

08002e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b082      	sub	sp, #8
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e34:	46c0      	nop			; (mov r8, r8)
 8002e36:	46bd      	mov	sp, r7
 8002e38:	b002      	add	sp, #8
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b002      	add	sp, #8
 8002e4a:	bd80      	pop	{r7, pc}

08002e4c <__libc_init_array>:
 8002e4c:	b570      	push	{r4, r5, r6, lr}
 8002e4e:	2600      	movs	r6, #0
 8002e50:	4d0c      	ldr	r5, [pc, #48]	; (8002e84 <__libc_init_array+0x38>)
 8002e52:	4c0d      	ldr	r4, [pc, #52]	; (8002e88 <__libc_init_array+0x3c>)
 8002e54:	1b64      	subs	r4, r4, r5
 8002e56:	10a4      	asrs	r4, r4, #2
 8002e58:	42a6      	cmp	r6, r4
 8002e5a:	d109      	bne.n	8002e70 <__libc_init_array+0x24>
 8002e5c:	2600      	movs	r6, #0
 8002e5e:	f000 f821 	bl	8002ea4 <_init>
 8002e62:	4d0a      	ldr	r5, [pc, #40]	; (8002e8c <__libc_init_array+0x40>)
 8002e64:	4c0a      	ldr	r4, [pc, #40]	; (8002e90 <__libc_init_array+0x44>)
 8002e66:	1b64      	subs	r4, r4, r5
 8002e68:	10a4      	asrs	r4, r4, #2
 8002e6a:	42a6      	cmp	r6, r4
 8002e6c:	d105      	bne.n	8002e7a <__libc_init_array+0x2e>
 8002e6e:	bd70      	pop	{r4, r5, r6, pc}
 8002e70:	00b3      	lsls	r3, r6, #2
 8002e72:	58eb      	ldr	r3, [r5, r3]
 8002e74:	4798      	blx	r3
 8002e76:	3601      	adds	r6, #1
 8002e78:	e7ee      	b.n	8002e58 <__libc_init_array+0xc>
 8002e7a:	00b3      	lsls	r3, r6, #2
 8002e7c:	58eb      	ldr	r3, [r5, r3]
 8002e7e:	4798      	blx	r3
 8002e80:	3601      	adds	r6, #1
 8002e82:	e7f2      	b.n	8002e6a <__libc_init_array+0x1e>
 8002e84:	08002f2c 	.word	0x08002f2c
 8002e88:	08002f2c 	.word	0x08002f2c
 8002e8c:	08002f2c 	.word	0x08002f2c
 8002e90:	08002f30 	.word	0x08002f30

08002e94 <memset>:
 8002e94:	0003      	movs	r3, r0
 8002e96:	1882      	adds	r2, r0, r2
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d100      	bne.n	8002e9e <memset+0xa>
 8002e9c:	4770      	bx	lr
 8002e9e:	7019      	strb	r1, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	e7f9      	b.n	8002e98 <memset+0x4>

08002ea4 <_init>:
 8002ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ea6:	46c0      	nop			; (mov r8, r8)
 8002ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eaa:	bc08      	pop	{r3}
 8002eac:	469e      	mov	lr, r3
 8002eae:	4770      	bx	lr

08002eb0 <_fini>:
 8002eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eb6:	bc08      	pop	{r3}
 8002eb8:	469e      	mov	lr, r3
 8002eba:	4770      	bx	lr
